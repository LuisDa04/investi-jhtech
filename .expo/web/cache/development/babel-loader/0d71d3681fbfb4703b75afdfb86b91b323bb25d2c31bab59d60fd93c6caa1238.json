{"ast":null,"code":"import { useEffect, useReducer, useMemo } from 'react';\nimport ExpoLocalization, { addCalendarListener, addLocaleListener, removeSubscription } from './ExpoLocalization';\nexport * from './Localization.types';\nexport const getLocales = ExpoLocalization.getLocales;\nexport const getCalendars = ExpoLocalization.getCalendars;\nexport function useLocales() {\n  const [key, invalidate] = useReducer(k => k + 1, 0);\n  const locales = useMemo(() => getLocales(), [key]);\n  useEffect(() => {\n    const subscription = addLocaleListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return locales;\n}\nexport function useCalendars() {\n  const [key, invalidate] = useReducer(k => k + 1, 0);\n  const calendars = useMemo(() => getCalendars(), [key]);\n  useEffect(() => {\n    const subscription = addCalendarListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return calendars;\n}","map":{"version":3,"names":["useEffect","useReducer","useMemo","ExpoLocalization","addCalendarListener","addLocaleListener","removeSubscription","getLocales","getCalendars","useLocales","key","invalidate","k","locales","subscription","useCalendars","calendars"],"sources":["C:\\Users\\invit\\Downloads\\investi-app\\node_modules\\expo-localization\\src\\Localization.ts"],"sourcesContent":["import { useEffect, useReducer, useMemo } from 'react';\n\nimport ExpoLocalization, {\n  addCalendarListener,\n  addLocaleListener,\n  removeSubscription,\n} from './ExpoLocalization';\n\nexport * from './Localization.types';\n\n/**\n * List of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * @example\n * ```js\n * [{\n *   \"languageTag\": \"pl-PL\",\n *   \"languageCode\": \"pl\",\n *   \"textDirection\": \"ltr\",\n *   \"digitGroupingSeparator\": \" \",\n *   \"decimalSeparator\": \",\",\n *   \"measurementSystem\": \"metric\",\n *   \"currencyCode\": \"PLN\",\n *   \"currencySymbol\": \"zł\",\n *   \"regionCode\": \"PL\",\n *   \"temperatureUnit\": \"celsius\"\n * }]\n * ```\n */\nexport const getLocales = ExpoLocalization.getLocales;\n\n/**\n * List of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * @example\n * ```js\n * [{\n *   \"calendar\": \"gregory\",\n *   \"timeZone\": \"Europe/Warsaw\",\n *   \"uses24hourClock\": true,\n *   \"firstWeekday\": 1\n * }]\n * ```\n */\nexport const getCalendars = ExpoLocalization.getCalendars;\n\n/**\n * A hook providing a list of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * If the OS settings change, the hook will rerender with a new list of locales.\n * @example\n * ```js\n * [{\n *   \"languageTag\": \"pl-PL\",\n *   \"languageCode\": \"pl\",\n *   \"textDirection\": \"ltr\",\n *   \"digitGroupingSeparator\": \" \",\n *   \"decimalSeparator\": \",\",\n *   \"measurementSystem\": \"metric\",\n *   \"currencyCode\": \"PLN\",\n *   \"currencySymbol\": \"zł\",\n *   \"regionCode\": \"PL\",\n *   \"temperatureUnit\": \"celsius\"\n * }]\n * ```\n */\nexport function useLocales() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const locales = useMemo(() => getLocales(), [key]);\n  useEffect(() => {\n    const subscription = addLocaleListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return locales;\n}\n\n/**\n * A hook providing a list of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * If the OS settings change, the hook will rerender with a new list of calendars.\n * @example\n * ```js\n * [{\n *   \"calendar\": \"gregory\",\n *   \"timeZone\": \"Europe/Warsaw\",\n *   \"uses24hourClock\": true,\n *   \"firstWeekday\": 1\n * }]\n * ```\n */\nexport function useCalendars() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const calendars = useMemo(() => getCalendars(), [key]);\n  useEffect(() => {\n    const subscription = addCalendarListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return calendars;\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAEtD,OAAOC,gBAAgB,IACrBC,mBAAmB,EACnBC,iBAAiB,EACjBC,kBAAkB,QACb,oBAAoB;AAE3B,cAAc,sBAAsB;AAwBpC,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CAACI,UAAU;AAgBrD,OAAO,MAAMC,YAAY,GAAGL,gBAAgB,CAACK,YAAY;AAyBzD,OAAM,SAAUC,UAAUA,CAAA;EACxB,MAAM,CAACC,GAAG,EAAEC,UAAU,CAAC,GAAGV,UAAU,CAAEW,CAAC,IAAKA,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;EACrD,MAAMC,OAAO,GAAGX,OAAO,CAAC,MAAMK,UAAU,EAAE,EAAE,CAACG,GAAG,CAAC,CAAC;EAClDV,SAAS,CAAC,MAAK;IACb,MAAMc,YAAY,GAAGT,iBAAiB,CAACM,UAAU,CAAC;IAClD,OAAO,MAAK;MACVL,kBAAkB,CAACQ,YAAY,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAOD,OAAO;AAChB;AAiBA,OAAM,SAAUE,YAAYA,CAAA;EAC1B,MAAM,CAACL,GAAG,EAAEC,UAAU,CAAC,GAAGV,UAAU,CAAEW,CAAC,IAAKA,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;EACrD,MAAMI,SAAS,GAAGd,OAAO,CAAC,MAAMM,YAAY,EAAE,EAAE,CAACE,GAAG,CAAC,CAAC;EACtDV,SAAS,CAAC,MAAK;IACb,MAAMc,YAAY,GAAGV,mBAAmB,CAACO,UAAU,CAAC;IACpD,OAAO,MAAK;MACVL,kBAAkB,CAACQ,YAAY,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAOE,SAAS;AAClB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}