{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nconst getNavigatorLocales = () => {\n  if (Platform.isDOMAvailable) {\n    return navigator.languages || [navigator.language];\n  }\n  const dtFormatLocale = Intl?.DateTimeFormat()?.resolvedOptions()?.locale;\n  if (dtFormatLocale) {\n    return [dtFormatLocale];\n  }\n  return [];\n};\nconst WEB_LANGUAGE_CHANGE_EVENT = 'languagechange';\nconst USES_FAHRENHEIT = ['AG', 'BZ', 'VG', 'FM', 'MH', 'MS', 'KN', 'BS', 'CY', 'TC', 'US', 'LR', 'PW', 'KY'];\nexport function addLocaleListener(listener) {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener)\n  };\n}\nexport function addCalendarListener(listener) {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener)\n  };\n}\nexport function removeSubscription(subscription) {\n  subscription.remove();\n}\nexport default {\n  getLocales() {\n    const locales = getNavigatorLocales();\n    return locales?.map(languageTag => {\n      let locale = {};\n      let digitGroupingSeparator = null;\n      let decimalSeparator = null;\n      let temperatureUnit = null;\n      try {\n        digitGroupingSeparator = Array.from(10000 .toLocaleString(languageTag)).filter(c => c > '9' || c < '0')[0] || null;\n        decimalSeparator = 1.1.toLocaleString(languageTag).substring(1, 2);\n        if (typeof Intl !== 'undefined') {\n          locale = new Intl.Locale(languageTag);\n        }\n      } catch {}\n      const {\n        region,\n        textInfo,\n        language,\n        script\n      } = locale;\n      if (region) {\n        temperatureUnit = regionToTemperatureUnit(region);\n      }\n      return {\n        languageTag,\n        languageCode: language || languageTag.split('-')[0] || 'en',\n        languageScriptCode: script || null,\n        textDirection: textInfo?.direction || null,\n        digitGroupingSeparator,\n        decimalSeparator,\n        measurementSystem: null,\n        currencyCode: null,\n        currencySymbol: null,\n        languageCurrencyCode: null,\n        languageCurrencySymbol: null,\n        regionCode: region || null,\n        languageRegionCode: region || null,\n        temperatureUnit\n      };\n    });\n  },\n  getCalendars() {\n    const locale = (typeof Intl !== 'undefined' ? Intl.DateTimeFormat().resolvedOptions() : null) ?? null;\n    return [{\n      calendar: locale?.calendar || locale?.calendars?.[0] || null,\n      timeZone: locale?.timeZone || locale?.timeZones?.[0] || null,\n      uses24hourClock: (locale?.hourCycle || locale?.hourCycles?.[0])?.startsWith('h2') ?? null,\n      firstWeekday: locale?.weekInfo?.firstDay || null\n    }];\n  }\n};\nfunction regionToTemperatureUnit(region) {\n  return USES_FAHRENHEIT.includes(region) ? 'fahrenheit' : 'celsius';\n}","map":{"version":3,"names":["Platform","getNavigatorLocales","isDOMAvailable","navigator","languages","language","dtFormatLocale","Intl","DateTimeFormat","resolvedOptions","locale","WEB_LANGUAGE_CHANGE_EVENT","USES_FAHRENHEIT","addLocaleListener","listener","addEventListener","remove","removeEventListener","addCalendarListener","removeSubscription","subscription","getLocales","locales","map","languageTag","digitGroupingSeparator","decimalSeparator","temperatureUnit","Array","from","toLocaleString","filter","c","substring","Locale","region","textInfo","script","regionToTemperatureUnit","languageCode","split","languageScriptCode","textDirection","direction","measurementSystem","currencyCode","currencySymbol","languageCurrencyCode","languageCurrencySymbol","regionCode","languageRegionCode","getCalendars","calendar","calendars","timeZone","timeZones","uses24hourClock","hourCycle","hourCycles","startsWith","firstWeekday","weekInfo","firstDay","includes"],"sources":["C:\\Users\\invit\\Downloads\\investi-app\\node_modules\\expo-localization\\src\\ExpoLocalization.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform, type EventSubscription } from 'expo-modules-core';\n\nimport { Calendar, Locale, CalendarIdentifier } from './Localization.types';\n\nconst getNavigatorLocales = () => {\n  if (Platform.isDOMAvailable) {\n    return navigator.languages || [navigator.language];\n  }\n  const dtFormatLocale = Intl?.DateTimeFormat()?.resolvedOptions()?.locale;\n  if (dtFormatLocale) {\n    return [dtFormatLocale];\n  }\n  return [];\n};\n\ntype ExtendedLocale = Intl.Locale &\n  // typescript definitions for navigator language don't include some modern Intl properties\n  Partial<{\n    textInfo: { direction: 'ltr' | 'rtl' };\n    timeZones: string[];\n    weekInfo: { firstDay: number };\n    hourCycles: string[];\n    timeZone: string;\n    calendars: string[];\n  }>;\n\nconst WEB_LANGUAGE_CHANGE_EVENT = 'languagechange';\n// https://wisevoter.com/country-rankings/countries-that-use-fahrenheit/\nconst USES_FAHRENHEIT = [\n  'AG',\n  'BZ',\n  'VG',\n  'FM',\n  'MH',\n  'MS',\n  'KN',\n  'BS',\n  'CY',\n  'TC',\n  'US',\n  'LR',\n  'PW',\n  'KY',\n];\n\nexport function addLocaleListener(\n  // NOTE(@kitten): We never use the event's data\n  listener: (event?: unknown) => void\n): EventSubscription {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener),\n  };\n}\n\nexport function addCalendarListener(\n  // NOTE(@kitten): We never use the event's data\n  listener: (event?: unknown) => void\n): EventSubscription {\n  addEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener);\n  return {\n    remove: () => removeEventListener(WEB_LANGUAGE_CHANGE_EVENT, listener),\n  };\n}\n\nexport function removeSubscription(subscription: EventSubscription) {\n  subscription.remove();\n}\n\nexport default {\n  getLocales(): Locale[] {\n    const locales = getNavigatorLocales();\n    return locales?.map((languageTag) => {\n      // TextInfo is an experimental API that is not available in all browsers.\n      // We might want to consider using a locale lookup table instead.\n\n      let locale = {} as ExtendedLocale;\n\n      // Properties added only for compatibility with native, use `toLocaleString` instead.\n      let digitGroupingSeparator: string | null = null;\n      let decimalSeparator: string | null = null;\n      let temperatureUnit: 'fahrenheit' | 'celsius' | null = null;\n\n      // Gracefully handle language codes like `en-GB-oed` which is unsupported\n      // but is otherwise a valid language tag (grandfathered)\n      try {\n        digitGroupingSeparator =\n          Array.from((10000).toLocaleString(languageTag)).filter((c) => c > '9' || c < '0')[0] ||\n          null; // using 1e5 instead of 1e4 since for some locales (like pl-PL) 1e4 does not use digit grouping\n\n        decimalSeparator = (1.1).toLocaleString(languageTag).substring(1, 2);\n\n        if (typeof Intl !== 'undefined') {\n          locale = new Intl.Locale(languageTag) as unknown as ExtendedLocale;\n        }\n      } catch {}\n\n      const { region, textInfo, language, script } = locale;\n\n      if (region) {\n        temperatureUnit = regionToTemperatureUnit(region);\n      }\n\n      return {\n        languageTag,\n        languageCode: language || languageTag.split('-')[0] || 'en',\n        languageScriptCode: script || null,\n        textDirection: (textInfo?.direction as 'ltr' | 'rtl') || null,\n        digitGroupingSeparator,\n        decimalSeparator,\n        measurementSystem: null,\n        currencyCode: null,\n        currencySymbol: null,\n        languageCurrencyCode: null,\n        languageCurrencySymbol: null,\n        // On web, we don't have a way to get the region code, except from the language tag. `regionCode` and `languageRegionCode` are the same.\n        regionCode: region || null,\n        languageRegionCode: region || null,\n        temperatureUnit,\n      };\n    });\n  },\n  getCalendars(): Calendar[] {\n    const locale = ((typeof Intl !== 'undefined'\n      ? Intl.DateTimeFormat().resolvedOptions()\n      : null) ?? null) as unknown as null | ExtendedLocale;\n    return [\n      {\n        calendar: ((locale?.calendar || locale?.calendars?.[0]) as CalendarIdentifier) || null,\n        timeZone: locale?.timeZone || locale?.timeZones?.[0] || null,\n        uses24hourClock: (locale?.hourCycle || locale?.hourCycles?.[0])?.startsWith('h2') ?? null, //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle\n        firstWeekday: locale?.weekInfo?.firstDay || null,\n      },\n    ];\n  },\n};\n\nfunction regionToTemperatureUnit(region: string) {\n  return USES_FAHRENHEIT.includes(region) ? 'fahrenheit' : 'celsius';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}