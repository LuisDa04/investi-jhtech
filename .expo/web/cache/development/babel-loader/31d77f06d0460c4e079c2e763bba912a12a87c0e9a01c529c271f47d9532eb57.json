{"ast":null,"code":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { getMe } from \"../rest/api\";\nimport { getCurrentUserId } from \"../rest/client\";\nexport function useOnboardingGuard() {\n  const navigation = useNavigation();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkOnboarding = async () => {\n      try {\n        const uid = await getCurrentUserId();\n        if (!uid) return;\n        const user = await getMe(uid);\n        if (!user) return;\n        const hasGoals = user.metas && user.metas.length > 0;\n        const hasInterests = user.intereses && user.intereses.length > 0;\n        const hasKnowledge = user.nivel_finanzas && user.nivel_finanzas !== \"none\";\n        if (!hasGoals) {\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: \"Onboarding\",\n              params: {\n                screen: \"InvestmentInterests\"\n              }\n            }]\n          });\n          return;\n        }\n        if (!hasInterests) {\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: \"Onboarding\",\n              params: {\n                screen: \"InvestmentInterests\"\n              }\n            }]\n          });\n          return;\n        }\n        if (!hasKnowledge) {\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: \"Onboarding\",\n              params: {\n                screen: \"InvestmentKnowledge\"\n              }\n            }]\n          });\n          return;\n        }\n      } catch (error) {\n        console.error(\"Error checking onboarding:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkOnboarding();\n  }, [navigation]);\n  return {\n    loading\n  };\n}","map":{"version":3,"names":["useEffect","useState","useNavigation","getMe","getCurrentUserId","useOnboardingGuard","navigation","loading","setLoading","checkOnboarding","uid","user","hasGoals","metas","length","hasInterests","intereses","hasKnowledge","nivel_finanzas","reset","index","routes","name","params","screen","error","console"],"sources":["C:/Users/invit/Downloads/investi-app/src/hooks/useOnboardingGuard.ts"],"sourcesContent":["\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { useNavigation } from \"@react-navigation/native\"\r\nimport { NativeStackNavigationProp } from \"@react-navigation/native-stack\"\r\nimport { RootStackParamList } from \"../types/navigation\"\r\nimport { getMe } from \"../rest/api\"\r\nimport { getCurrentUserId } from \"../rest/client\"\r\n\r\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList>\r\n\r\nexport function useOnboardingGuard() {\r\n  const navigation = useNavigation<NavigationProp>()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const checkOnboarding = async () => {\r\n      try {\r\n        const uid = await getCurrentUserId()\r\n        if (!uid) return\r\n\r\n        const user = await getMe(uid)\r\n        if (!user) return\r\n\r\n        const hasGoals = user.metas && user.metas.length > 0\r\n        const hasInterests = user.intereses && user.intereses.length > 0\r\n        const hasKnowledge = user.nivel_finanzas && user.nivel_finanzas !== \"none\"\r\n\r\n        if (!hasGoals) {\r\n          navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: \"Onboarding\", params: { screen: \"InvestmentInterests\" } }],\r\n          })\r\n          return\r\n        }\r\n\r\n        if (!hasInterests) {\r\n          navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: \"Onboarding\", params: { screen: \"InvestmentInterests\" } }],\r\n          })\r\n          return\r\n        }\r\n\r\n        if (!hasKnowledge) {\r\n          navigation.reset({\r\n            index: 0,\r\n            routes: [{ name: \"Onboarding\", params: { screen: \"InvestmentKnowledge\" } }],\r\n          })\r\n          return\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error checking onboarding:\", error)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    checkOnboarding()\r\n  }, [navigation])\r\n\r\n  return { loading }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,0BAA0B;AAGxD,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,gBAAgB,QAAQ,gBAAgB;AAIjD,OAAO,SAASC,kBAAkBA,CAAA,EAAG;EACnC,MAAMC,UAAU,GAAGJ,aAAa,CAAiB,CAAC;EAClD,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMN,gBAAgB,CAAC,CAAC;QACpC,IAAI,CAACM,GAAG,EAAE;QAEV,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACO,GAAG,CAAC;QAC7B,IAAI,CAACC,IAAI,EAAE;QAEX,MAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC;QACpD,MAAMC,YAAY,GAAGJ,IAAI,CAACK,SAAS,IAAIL,IAAI,CAACK,SAAS,CAACF,MAAM,GAAG,CAAC;QAChE,MAAMG,YAAY,GAAGN,IAAI,CAACO,cAAc,IAAIP,IAAI,CAACO,cAAc,KAAK,MAAM;QAE1E,IAAI,CAACN,QAAQ,EAAE;UACbN,UAAU,CAACa,KAAK,CAAC;YACfC,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE,CAAC;cAAEC,IAAI,EAAE,YAAY;cAAEC,MAAM,EAAE;gBAAEC,MAAM,EAAE;cAAsB;YAAE,CAAC;UAC5E,CAAC,CAAC;UACF;QACF;QAEA,IAAI,CAACT,YAAY,EAAE;UACjBT,UAAU,CAACa,KAAK,CAAC;YACfC,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE,CAAC;cAAEC,IAAI,EAAE,YAAY;cAAEC,MAAM,EAAE;gBAAEC,MAAM,EAAE;cAAsB;YAAE,CAAC;UAC5E,CAAC,CAAC;UACF;QACF;QAEA,IAAI,CAACP,YAAY,EAAE;UACjBX,UAAU,CAACa,KAAK,CAAC;YACfC,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE,CAAC;cAAEC,IAAI,EAAE,YAAY;cAAEC,MAAM,EAAE;gBAAEC,MAAM,EAAE;cAAsB;YAAE,CAAC;UAC5E,CAAC,CAAC;UACF;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,SAAS;QACRjB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAEhB,OAAO;IAAEC;EAAQ,CAAC;AACpB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}