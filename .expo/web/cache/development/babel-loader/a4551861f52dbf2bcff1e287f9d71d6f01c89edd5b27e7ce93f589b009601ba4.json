{"ast":null,"code":"import { request, authSignIn as clientSignIn, authSignUp as clientSignUp, authSignOut as clientSignOut, urls } from \"./client\";\nimport * as SecureStore from \"expo-secure-store\";\nconst ANON_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhb2xpYWt3Zm9jemNhbGxuZWNmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2MzA5ODYsImV4cCI6MjA3MDIwNjk4Nn0.zCJoTHcWKZB9vpy5Vn231PNsNSLzmnPvFBKTkNlgG4o\";\nexport const authSignIn = clientSignIn;\nexport const authSignUp = clientSignUp;\nexport const authSignOut = clientSignOut;\nexport async function getMe(uid) {\n  try {\n    const response = await request(\"GET\", \"/users\", {\n      params: {\n        select: \"*\",\n        id: `eq.${uid}`\n      }\n    });\n    return response?.[0] || null;\n  } catch (error) {\n    if (error.code === \"42P01\") return null;\n    throw error;\n  }\n}\nexport async function updateUser(uid, data) {\n  try {\n    return await request(\"PATCH\", \"/users\", {\n      params: {\n        id: `eq.${uid}`\n      },\n      body: data,\n      headers: {\n        Prefer: \"return=representation\"\n      }\n    });\n  } catch (error) {\n    if (error.code === \"42P01\") return null;\n    throw error;\n  }\n}\nexport async function getUserProfile(userId) {\n  try {\n    const response = await request(\"GET\", \"/users\", {\n      params: {\n        id: `eq.${userId}`,\n        select: \"*,posts:posts(count),followers:user_followers!following_id(count),following:user_followers!follower_id(count)\"\n      }\n    });\n    return response?.[0] || null;\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    return null;\n  }\n}\nexport async function listCommunities() {\n  try {\n    const response = await request(\"GET\", \"/communities\", {\n      params: {\n        select: \"id,nombre,descripcion,icono_url,tipo,created_at\",\n        order: \"created_at.desc\"\n      }\n    });\n    return (response || []).map(community => ({\n      id: community.id,\n      name: community.nombre,\n      description: community.descripcion,\n      image_url: community.icono_url,\n      type: community.tipo,\n      created_at: community.created_at,\n      members_count: 0\n    }));\n  } catch (error) {\n    if (error.code === \"42P01\") return [];\n    throw error;\n  }\n}\nexport async function joinCommunity(uid, community_id) {\n  try {\n    return await request(\"POST\", \"/user_communities\", {\n      body: {\n        user_id: uid,\n        community_id\n      }\n    });\n  } catch (error) {\n    if (error.code === \"23505\") return null;\n    throw error;\n  }\n}\nexport async function getCommunityDetails(communityId) {\n  try {\n    const response = await request(\"GET\", \"/communities\", {\n      params: {\n        id: `eq.${communityId}`,\n        select: \"id,nombre,descripcion,icono_url,tipo,created_at,members:user_communities(count)\"\n      }\n    });\n    if (!response?.[0]) return null;\n    const community = response[0];\n    return {\n      id: community.id,\n      name: community.nombre,\n      description: community.descripcion,\n      image_url: community.icono_url,\n      type: community.tipo,\n      created_at: community.created_at,\n      members_count: community.members?.[0]?.count || 0\n    };\n  } catch (error) {\n    console.error('Error fetching community details:', error);\n    return null;\n  }\n}\nexport async function getUserCommunities(userId) {\n  try {\n    const response = await request(\"GET\", \"/user_communities\", {\n      params: {\n        user_id: `eq.${userId}`,\n        select: \"community:communities(id,nombre,icono_url,descripcion)\"\n      }\n    });\n    return (response || []).map(uc => ({\n      id: uc.community?.id,\n      name: uc.community?.nombre,\n      nombre: uc.community?.nombre,\n      image_url: uc.community?.icono_url,\n      icono_url: uc.community?.icono_url,\n      descripcion: uc.community?.descripcion\n    })).filter(c => c.id);\n  } catch (error) {\n    console.error('Error fetching user communities:', error);\n    return [];\n  }\n}\nexport async function getCommunityChannels(communityId) {\n  try {\n    const response = await request(\"GET\", \"/community_channels\", {\n      params: {\n        community_id: `eq.${communityId}`,\n        select: \"id,name,description,type,created_at\",\n        order: \"created_at.asc\"\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching community channels:', error);\n    return [];\n  }\n}\nexport async function getCommunityPosts(communityId, limit = 20) {\n  try {\n    const response = await request(\"GET\", \"/posts\", {\n      params: {\n        community_id: `eq.${communityId}`,\n        select: \"id,contenido,created_at,likes_count,comment_count,user_id,users!inner(nombre,photo_url,role)\",\n        order: \"created_at.desc\",\n        limit: String(limit)\n      }\n    });\n    return (response || []).map(post => ({\n      id: post.id,\n      content: post.contenido,\n      created_at: post.created_at,\n      likes: post.likes_count || 0,\n      comments: post.comment_count || 0,\n      shares: 0,\n      author: {\n        id: post.user_id,\n        name: post.users?.nombre || 'Usuario',\n        avatar: post.users?.photo_url || 'https://i.pravatar.cc/100',\n        role: post.users?.role || 'Usuario'\n      }\n    }));\n  } catch (error) {\n    console.error('Error fetching community posts:', error);\n    return [];\n  }\n}\nexport async function getChannelMessages(chatId, limit = 50) {\n  try {\n    const response = await request(\"GET\", \"/chat_messages\", {\n      params: {\n        chat_id: `eq.${chatId}`,\n        select: \"id,content,created_at,user:users!sender_id(id,nombre,avatar_url)\",\n        order: \"created_at.asc\",\n        limit: String(limit)\n      }\n    });\n    return (response || []).map(msg => ({\n      id: msg.id,\n      content: msg.content,\n      created_at: msg.created_at,\n      user: {\n        id: msg.user?.id || '',\n        nombre: msg.user?.nombre || 'Usuario',\n        avatar: msg.user?.avatar_url || 'https://i.pravatar.cc/100'\n      }\n    }));\n  } catch (error) {\n    console.error('Error fetching messages:', error);\n    return [];\n  }\n}\nexport async function sendMessage(chatId, userId, content) {\n  try {\n    const response = await request(\"POST\", \"/chat_messages\", {\n      body: {\n        chat_id: chatId,\n        sender_id: userId,\n        content: content\n      }\n    });\n    await request(\"PATCH\", \"/chats\", {\n      params: {\n        id: `eq.${chatId}`\n      },\n      body: {\n        last_message: content,\n        last_message_at: new Date().toISOString()\n      }\n    });\n    return response;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n}\nexport async function getUserFeed(uid, limit = 20) {\n  try {\n    const rpcResponse = await request(\"POST\", \"/rpc/get_personalized_feed\", {\n      body: {\n        p_user_id: uid,\n        p_limit: limit\n      }\n    });\n    return rpcResponse || [];\n  } catch (rpcError) {\n    console.log(\"RPC failed, trying direct query:\", rpcError);\n    try {\n      const directResponse = await request(\"GET\", \"/posts\", {\n        params: {\n          select: \"id,contenido,created_at,likes_count,comment_count,user_id,users!inner(nombre,full_name,username,photo_url,avatar_url,role)\",\n          order: \"created_at.desc\",\n          limit: String(limit)\n        }\n      });\n      return (directResponse || []).map(post => ({\n        id: post.id,\n        user_data: {\n          name: post.users?.full_name || post.users?.nombre || 'Usuario',\n          avatar: post.users?.avatar_url || post.users?.photo_url || 'https://i.pravatar.cc/100?img=1',\n          role: post.users?.role || 'Usuario'\n        },\n        content: post.contenido,\n        image: null,\n        post_time: new Date(post.created_at).toLocaleTimeString(),\n        likes: post.likes_count || 0,\n        comments: post.comment_count || 0,\n        shares: 0,\n        created_at: post.created_at,\n        user_id: post.user_id\n      }));\n    } catch (directError) {\n      console.error(\"Direct query also failed:\", directError);\n      return [];\n    }\n  }\n}\nexport async function createPost(data) {\n  return await request(\"POST\", \"/posts\", {\n    body: data\n  });\n}\nexport async function getPostDetail(postId) {\n  try {\n    const response = await request(\"GET\", \"/posts\", {\n      params: {\n        id: `eq.${postId}`,\n        select: \"id,contenido,created_at,likes_count,comment_count,user_id,users!inner(nombre,full_name,username,photo_url,avatar_url,role),comments(*)\"\n      }\n    });\n    return response?.[0] || null;\n  } catch (error) {\n    return null;\n  }\n}\nexport async function likePost(post_id, user_id, is_like = true) {\n  try {\n    return await request(\"POST\", \"/post_likes\", {\n      body: {\n        post_id,\n        user_id,\n        is_like\n      }\n    });\n  } catch (error) {\n    if (error.code === \"23505\") return null;\n    return null;\n  }\n}\nexport async function commentPost(post_id, user_id, contenido, parent_id) {\n  return await request(\"POST\", \"/comments\", {\n    body: {\n      post_id,\n      user_id,\n      contenido,\n      parent_id: parent_id || null\n    }\n  });\n}\nexport async function fetchPromotions(params) {\n  try {\n    const {\n      page = 1,\n      limit = 10\n    } = params;\n    const response = await request(\"GET\", \"/promotions\", {\n      params: {\n        select: \"*\",\n        order: \"created_at.desc\",\n        offset: String((page - 1) * limit),\n        limit: String(limit)\n      }\n    });\n    return {\n      data: response || [],\n      meta: {\n        currentPage: page,\n        totalItems: response?.length || 0,\n        hasMore: (response?.length || 0) >= limit\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching promotions:', error);\n    throw new Error(error.message || 'Error al cargar las promociones');\n  }\n}\nexport async function fetchCourses(userId, params) {\n  try {\n    const {\n      page = 1,\n      limit = 10\n    } = params;\n    const response = await request(\"POST\", \"/rpc/get_user_courses\", {\n      body: {\n        p_user_id: userId,\n        p_page: page,\n        p_limit: limit\n      }\n    });\n    return {\n      data: response || [],\n      meta: {\n        currentPage: page,\n        totalItems: response?.length || 0,\n        hasMore: (response?.length || 0) >= limit\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error(error.message || 'Error al cargar los cursos');\n  }\n}\nexport async function fetchArticles(params) {\n  try {\n    const {\n      page = 1,\n      limit = 10,\n      category\n    } = params;\n    const query = {\n      select: \"*\",\n      order: \"created_at.desc\",\n      offset: String((page - 1) * limit),\n      limit: String(limit)\n    };\n    if (category) {\n      query.category = `eq.${category}`;\n    }\n    const response = await request(\"GET\", \"/articles\", {\n      params: query\n    });\n    return {\n      data: response || [],\n      meta: {\n        currentPage: page,\n        totalItems: response?.length || 0,\n        hasMore: (response?.length || 0) >= limit\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching articles:', error);\n    throw new Error(error.message || 'Error al cargar los artículos');\n  }\n}\nexport async function fetchEducationalContent(params) {\n  try {\n    const {\n      page = 1,\n      limit = 10,\n      contentType\n    } = params;\n    const query = {\n      select: \"*\",\n      order: \"created_at.desc\",\n      offset: String((page - 1) * limit),\n      limit: String(limit)\n    };\n    if (contentType) {\n      query.content_type = `eq.${contentType}`;\n    }\n    const response = await request(\"GET\", \"/educational_content\", {\n      params: query\n    });\n    return {\n      data: response || [],\n      meta: {\n        currentPage: page,\n        totalItems: response?.length || 0,\n        hasMore: (response?.length || 0) >= limit\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching educational content:', error);\n    throw new Error(error.message || 'Error al cargar el contenido educativo');\n  }\n}\nexport async function getNewsList(category) {\n  try {\n    const query = {\n      select: \"*,author:users(id,nombre,full_name,username,photo_url,avatar_url)\",\n      order: \"published_at.desc\"\n    };\n    if (category) {\n      query.category = `eq.${category}`;\n    }\n    const response = await request(\"GET\", \"/news\", {\n      params: query\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching news:', error);\n    return [];\n  }\n}\nexport async function getNewsDetail(newsId) {\n  try {\n    const response = await request(\"GET\", \"/news\", {\n      params: {\n        id: `eq.${newsId}`,\n        select: \"*,author:users(id,nombre,full_name,username,photo_url,avatar_url)\"\n      }\n    });\n    return response?.[0] || null;\n  } catch (error) {\n    console.error('Error fetching news detail:', error);\n    return null;\n  }\n}\nexport async function globalSearch(query, userId) {\n  try {\n    const response = await request(\"POST\", \"/rpc/search_all\", {\n      body: {\n        search_term: query,\n        current_user_id: userId\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error in global search:', error);\n    return [];\n  }\n}\nexport async function searchUsers(query) {\n  try {\n    const response = await request(\"GET\", \"/users\", {\n      params: {\n        or: `nombre.ilike.%${query}%,username.ilike.%${query}%`,\n        select: \"id,nombre,full_name,username,photo_url,avatar_url,role,bio\",\n        limit: \"20\"\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error searching users:', error);\n    return [];\n  }\n}\nexport async function uploadAvatar(uid, blob) {\n  const token = await SecureStore.getItemAsync(\"access_token\");\n  const response = await fetch(`${urls.STORAGE_URL}/object/avatars/${uid}/avatar.jpg`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"image/jpeg\",\n      \"apikey\": ANON_KEY,\n      \"Authorization\": `Bearer ${token}`\n    },\n    body: blob\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Upload error details:\", errorText);\n    throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n  }\n  return await response.json();\n}\nexport async function uploadImage(file) {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const token = await SecureStore.getItemAsync(\"access_token\");\n    const response = await fetch(`${urls.STORAGE_URL}/object/avatars/${file.name}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'apikey': ANON_KEY\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Error al subir la imagen');\n    }\n    const data = await response.json();\n    return data.url;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    return 'https://www.investiiapp.com/investi-logo-new-main.png';\n  }\n}\nexport async function getCourses() {\n  try {\n    return await request(\"GET\", \"/courses\", {\n      params: {\n        select: \"id,titulo,descripcion,imagen_url,categoria,precio,total_lecciones,duracion_total\"\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    return [];\n  }\n}\nexport async function getLessons(courseId) {\n  try {\n    let params = {\n      select: \"id,titulo,descripcion,duracion,tipo,orden\"\n    };\n    if (courseId) {\n      params.course_id = `eq.${courseId}`;\n    }\n    return await request(\"GET\", \"/lessons\", {\n      params\n    });\n  } catch (error) {\n    console.error('Error fetching lessons:', error);\n    return [];\n  }\n}\nexport async function getCoursesWithLessons() {\n  try {\n    return await request(\"GET\", \"/courses\", {\n      params: {\n        select: \"id,titulo,descripcion,course_modules(id,titulo,orden,lessons(id,titulo,orden))\"\n      }\n    });\n  } catch (error) {\n    if (error.code === \"42P01\") return [];\n    return [];\n  }\n}\nexport async function getUserLearningProgress(userId) {\n  try {\n    const response = await request(\"GET\", \"/user_course_progress\", {\n      params: {\n        user_id: `eq.${userId}`,\n        select: \"course:courses(id,titulo),completed_lessons,progress_percent,last_accessed\",\n        order: \"last_accessed.desc\",\n        limit: \"5\"\n      }\n    });\n    return (response || []).map(progress => ({\n      courseId: progress.course?.id,\n      title: progress.course?.titulo,\n      completedLessons: progress.completed_lessons,\n      progress: progress.progress_percent,\n      lastAccessed: progress.last_accessed\n    }));\n  } catch (error) {\n    console.error('Error fetching learning progress:', error);\n    return [];\n  }\n}\nexport async function completeLesson(user_id, lesson_id) {\n  return await request(\"POST\", \"/lesson_progress\", {\n    body: {\n      user_id,\n      lesson_id\n    }\n  });\n}\nexport async function getPortfolio(uid) {\n  try {\n    const response = await request(\"GET\", \"/simulated_portfolios\", {\n      params: {\n        user_id: `eq.${uid}`,\n        select: \"*,simulated_investments(*)\"\n      }\n    });\n    return response?.[0] || null;\n  } catch (error) {\n    if (error.code === \"42P01\") return null;\n    return null;\n  }\n}\nexport async function addInvestment(payload) {\n  return await request(\"POST\", \"/simulated_investments\", {\n    body: payload\n  });\n}\nexport async function blockUser(user_id, blocked_user_id) {\n  return await request(\"POST\", \"/user_blocks\", {\n    body: {\n      user_id,\n      blocked_user_id\n    }\n  });\n}\nexport async function getCurrentUser() {\n  try {\n    const token = await SecureStore.getItemAsync(\"access_token\");\n    if (!token) return null;\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\n    const uid = payload.sub || null;\n    if (!uid) return null;\n    return await getMe(uid);\n  } catch {\n    return null;\n  }\n}\nexport async function getCurrentUserId() {\n  try {\n    const token = await SecureStore.getItemAsync(\"access_token\");\n    if (!token) return null;\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\n    return payload.sub || null;\n  } catch {\n    return null;\n  }\n}\nexport async function getNotifications(userId) {\n  const response = await request(\"GET\", \"/notifications\", {\n    params: {\n      user_id: `eq.${userId}`,\n      select: \"*\",\n      order: \"created_at.desc\"\n    }\n  });\n  return response || [];\n}\nexport async function markNotificationAsRead(notificationId) {\n  return await request(\"PATCH\", \"/notifications\", {\n    params: {\n      id: `eq.${notificationId}`\n    },\n    body: {\n      read: true\n    },\n    headers: {\n      Prefer: \"return=representation\"\n    }\n  });\n}\nexport async function getFAQs() {\n  const response = await request(\"GET\", \"/faqs\", {\n    params: {\n      select: \"*\",\n      order: \"created_at.asc\"\n    }\n  });\n  return response || [];\n}\nexport async function getGlossaryTerms() {\n  const response = await request(\"GET\", \"/glossary\", {\n    params: {\n      select: \"*\",\n      order: \"termino.asc\"\n    }\n  });\n  return response || [];\n}\nexport async function getUserBadges(userId) {\n  const response = await request(\"GET\", \"/user_badges\", {\n    params: {\n      user_id: `eq.${userId}`,\n      select: \"*,badge:badges(*)\"\n    }\n  });\n  return response || [];\n}\nexport async function getMarketData() {\n  try {\n    const response = await request(\"GET\", \"/market_data\", {\n      params: {\n        select: \"*\",\n        order: \"last_updated.desc\"\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching market data:', error);\n    return [];\n  }\n}\nexport async function getFeaturedStocks() {\n  try {\n    const response = await request(\"GET\", \"/market_data\", {\n      params: {\n        select: \"*\",\n        is_featured: \"eq.true\",\n        order: \"last_updated.desc\"\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching featured stocks:', error);\n    return [];\n  }\n}\nexport async function getActiveUsers(limit = 10) {\n  try {\n    const response = await request(\"GET\", \"/users\", {\n      params: {\n        select: \"id,nombre,avatar_url,is_online,last_seen_at\",\n        order: \"last_seen_at.desc\",\n        limit: String(limit)\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching active users:', error);\n    return [];\n  }\n}\nexport async function getUserChats(userId) {\n  try {\n    const response = await request(\"GET\", \"/chats\", {\n      params: {\n        or: `user_one_id.eq.${userId},user_two_id.eq.${userId}`,\n        select: \"id,type,last_message,last_message_at,unread_count,community:communities(id,nombre,icono_url),user_one:users!user_one_id(id,nombre,avatar_url),user_two:users!user_two_id(id,nombre,avatar_url)\",\n        order: \"last_message_at.desc\"\n      }\n    });\n    return (response || []).map(chat => Object.assign({}, chat, {\n      user: chat.type === 'direct' ? chat.user_one?.id === userId ? chat.user_two : chat.user_one : null\n    }));\n  } catch (error) {\n    console.error('Error fetching user chats:', error);\n    return [];\n  }\n}\nexport async function getLastMessages(chatIds) {\n  try {\n    const response = await request(\"GET\", \"/messages\", {\n      params: {\n        chat_id: `in.(${chatIds.join(',')})`,\n        select: \"id,chat_id,sender:users(id,nombre),content,created_at\",\n        order: \"created_at.desc\",\n        limit: \"1\"\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching last messages:', error);\n    return [];\n  }\n}\nexport async function getUserComplete(userId) {\n  try {\n    const [userResponse, statsResponse, postsResponse, communitiesResponse] = await Promise.all([request(\"GET\", \"/users\", {\n      params: {\n        id: `eq.${userId}`,\n        select: \"id,nombre,bio,location,avatar_url,banner_url,is_verified,created_at\"\n      }\n    }), request(\"GET\", \"/rpc/get_user_stats\", {\n      body: {\n        user_id: userId\n      }\n    }), request(\"GET\", \"/posts\", {\n      params: {\n        user_id: `eq.${userId}`,\n        select: \"id,contenido,created_at,likes_count,comment_count\",\n        order: \"created_at.desc\",\n        limit: \"10\"\n      }\n    }), request(\"GET\", \"/user_communities\", {\n      params: {\n        user_id: `eq.${userId}`,\n        select: \"community:communities(id,nombre,icono_url)\"\n      }\n    })]);\n    const user = userResponse?.[0];\n    if (!user) return null;\n    return {\n      id: user.id,\n      name: user.nombre,\n      bio: user.bio,\n      location: user.location,\n      avatarUrl: user.avatar_url,\n      bannerUrl: user.banner_url,\n      isVerified: user.is_verified,\n      stats: {\n        postsCount: postsResponse?.length || 0,\n        followersCount: statsResponse?.followers_count || 0,\n        followingCount: statsResponse?.following_count || 0\n      },\n      posts: postsResponse || [],\n      communities: communitiesResponse?.map(uc => uc.community) || []\n    };\n  } catch (error) {\n    console.error('Error fetching complete user profile:', error);\n    return null;\n  }\n}\nexport async function followUser(followerId, followingId) {\n  try {\n    return await request(\"POST\", \"/user_follows\", {\n      body: {\n        follower_id: followerId,\n        following_id: followingId\n      }\n    });\n  } catch (error) {\n    if (error.code === \"23505\") return null;\n    throw error;\n  }\n}\nexport async function unfollowUser(followerId, followingId) {\n  try {\n    return await request(\"DELETE\", \"/user_follows\", {\n      params: {\n        follower_id: `eq.${followerId}`,\n        following_id: `eq.${followingId}`\n      }\n    });\n  } catch (error) {\n    console.error('Error unfollowing user:', error);\n    throw error;\n  }\n}\nexport async function getUserPosts(userId, limit = 20) {\n  try {\n    const response = await request(\"GET\", \"/posts\", {\n      params: {\n        user_id: `eq.${userId}`,\n        select: \"id,contenido,created_at,likes_count,comment_count,media_url,user:users(id,nombre,avatar_url)\",\n        order: \"created_at.desc\",\n        limit: String(limit)\n      }\n    });\n    return response || [];\n  } catch (error) {\n    console.error('Error fetching user posts:', error);\n    return [];\n  }\n}\nexport async function getSavedPosts(userId) {\n  try {\n    const response = await request(\"GET\", \"/saved_posts\", {\n      params: {\n        user_id: `eq.${userId}`,\n        select: \"post:posts(id,contenido,created_at,likes_count,comment_count,user:users(id,nombre,avatar_url))\",\n        order: \"created_at.desc\"\n      }\n    });\n    return response?.map(sp => sp.post) || [];\n  } catch (error) {\n    console.error('Error fetching saved posts:', error);\n    return [];\n  }\n}\nexport async function getRecommendedCommunities(userId) {\n  try {\n    const response = await request(\"GET\", \"/communities\", {\n      params: {\n        select: \"id,nombre,descripcion,icono_url,members:user_communities(count)\",\n        limit: \"5\"\n      }\n    });\n    return response.map(community => ({\n      id: community.id,\n      name: community.nombre,\n      description: community.descripcion,\n      imageUrl: community.icono_url,\n      memberCount: community.members?.[0]?.count || 0,\n      isMember: false\n    }));\n  } catch (error) {\n    console.error('Error fetching recommended communities:', error);\n    return [];\n  }\n}\nexport const fetchInvestorProfile = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await request('GET', `/investor_profile?user_id=eq.${userId}`);\n    if (error) throw error;\n    if (!data || data.length === 0) {\n      const user = await getCurrentUser();\n      return {\n        id: userId,\n        user_id: userId,\n        experience_level: 'beginner',\n        investment_goals: [],\n        risk_tolerance: 'medium',\n        preferred_investments: [],\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        user: user || {\n          id: userId,\n          name: 'Inversionista'\n        }\n      };\n    }\n    const userData = await getUserProfile(userId);\n    return Object.assign({}, data[0], {\n      user: userData\n    });\n  } catch (error) {\n    console.error('Error fetching investor profile:', error);\n    throw error;\n  }\n};\nexport { request };","map":{"version":3,"names":["request","authSignIn","clientSignIn","authSignUp","clientSignUp","authSignOut","clientSignOut","urls","SecureStore","ANON_KEY","getMe","uid","response","params","select","id","error","code","updateUser","data","body","headers","Prefer","getUserProfile","userId","console","listCommunities","order","map","community","name","nombre","description","descripcion","image_url","icono_url","type","tipo","created_at","members_count","joinCommunity","community_id","user_id","getCommunityDetails","communityId","members","count","getUserCommunities","uc","filter","c","getCommunityChannels","getCommunityPosts","limit","String","post","content","contenido","likes","likes_count","comments","comment_count","shares","author","users","avatar","photo_url","role","getChannelMessages","chatId","chat_id","msg","user","avatar_url","sendMessage","sender_id","last_message","last_message_at","Date","toISOString","getUserFeed","rpcResponse","p_user_id","p_limit","rpcError","log","directResponse","user_data","full_name","image","post_time","toLocaleTimeString","directError","createPost","getPostDetail","postId","likePost","post_id","is_like","commentPost","parent_id","fetchPromotions","page","offset","meta","currentPage","totalItems","length","hasMore","Error","message","fetchCourses","p_page","fetchArticles","category","query","fetchEducationalContent","contentType","content_type","getNewsList","getNewsDetail","newsId","globalSearch","search_term","current_user_id","searchUsers","or","uploadAvatar","blob","token","getItemAsync","fetch","STORAGE_URL","method","ok","errorText","text","status","statusText","json","uploadImage","file","formData","FormData","append","url","getCourses","getLessons","courseId","course_id","getCoursesWithLessons","getUserLearningProgress","progress","course","title","titulo","completedLessons","completed_lessons","progress_percent","lastAccessed","last_accessed","completeLesson","lesson_id","getPortfolio","addInvestment","payload","blockUser","blocked_user_id","getCurrentUser","JSON","parse","atob","split","sub","getCurrentUserId","getNotifications","markNotificationAsRead","notificationId","read","getFAQs","getGlossaryTerms","getUserBadges","getMarketData","getFeaturedStocks","is_featured","getActiveUsers","getUserChats","chat","Object","assign","user_one","user_two","getLastMessages","chatIds","join","getUserComplete","userResponse","statsResponse","postsResponse","communitiesResponse","Promise","all","bio","location","avatarUrl","bannerUrl","banner_url","isVerified","is_verified","stats","postsCount","followersCount","followers_count","followingCount","following_count","posts","communities","followUser","followerId","followingId","follower_id","following_id","unfollowUser","getUserPosts","getSavedPosts","sp","getRecommendedCommunities","imageUrl","memberCount","isMember","fetchInvestorProfile","experience_level","investment_goals","risk_tolerance","preferred_investments","updated_at","userData"],"sources":["C:/Users/invit/Downloads/investi-app/src/rest/api.ts"],"sourcesContent":["import {  \n  request,  \n  authSignIn as clientSignIn,  \n  authSignUp as clientSignUp,  \n  authSignOut as clientSignOut,  \n  urls,  \n} from \"./client\"  \nimport * as SecureStore from \"expo-secure-store\"  \n  \n// Agregar la constante ANON_KEY que faltaba  \nconst ANON_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhb2xpYWt3Zm9jemNhbGxuZWNmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2MzA5ODYsImV4cCI6MjA3MDIwNjk4Nn0.zCJoTHcWKZB9vpy5Vn231PNsNSLzmnPvFBKTkNlgG4o\"  \n  \n// ===== INTERFACES =====  \nexport interface Promotion {  \n  id: string  \n  title: string  \n  description: string  \n  image_url: string  \n  discount: string  \n  valid_until: string  \n  location: string  \n  terms: string  \n  category: string  \n  created_at: string  \n  updated_at: string  \n}  \n  \nexport interface Course {  \n  id: string  \n  title: string  \n  description: string  \n  duration: string  \n  level: string  \n  lessons: number  \n  progress: number  \n  image_url: string  \n  created_at: string  \n  updated_at: string  \n}  \n  \nexport interface Article {  \n  id: string  \n  title: string  \n  content: string  \n  read_time: string  \n  category: string  \n  image_url: string  \n  created_at: string  \n  updated_at: string  \n}  \n  \nexport interface EducationalContent {  \n  id: string  \n  title: string  \n  description: string  \n  content_type: 'video' | 'article' | 'course'  \n  duration?: string  \n  level?: string  \n  image_url: string  \n  created_at: string  \n  updated_at: string  \n}  \n  \nexport interface News {  \n  id: string  \n  title: string  \n  content: string  \n  excerpt?: string  \n  image_url?: string  \n  author_id: string  \n  category: string  \n  published_at: string  \n  created_at: string  \n}  \n  \n// ===== AUTH =====  \nexport const authSignIn = clientSignIn  \nexport const authSignUp = clientSignUp  \nexport const authSignOut = clientSignOut  \n  \n// ===== USERS =====  \nexport async function getMe(uid: string) {  \n  try {  \n    const response = await request(\"GET\", \"/users\", {  \n      params: { select: \"*\", id: `eq.${uid}` },  \n    })  \n    return response?.[0] || null  \n  } catch (error: any) {  \n    if (error.code === \"42P01\") return null // Table doesn't exist  \n    throw error  \n  }  \n}  \n  \nexport async function updateUser(uid: string, data: any) {  \n  try {  \n    return await request(\"PATCH\", \"/users\", {  \n      params: { id: `eq.${uid}` },  \n      body: data,  \n      headers: { Prefer: \"return=representation\" },  \n    })  \n  } catch (error: any) {  \n    if (error.code === \"42P01\") return null  \n    throw error  \n  }  \n}  \n  \nexport async function getUserProfile(userId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/users\", {  \n      params: {  \n        id: `eq.${userId}`,  \n        select: \"*,posts:posts(count),followers:user_followers!following_id(count),following:user_followers!follower_id(count)\"  \n      },  \n    })  \n    return response?.[0] || null  \n  } catch (error: any) {  \n    console.error('Error fetching user profile:', error)  \n    return null  \n  }  \n}  \n  \n// ===== COMMUNITIES =====  \nexport async function listCommunities() {  \n  try {  \n    const response = await request(\"GET\", \"/communities\", {  \n      params: {   \n        select: \"id,nombre,descripcion,icono_url,tipo,created_at\",   \n        order: \"created_at.desc\"   \n      },  \n    })  \n    // Mapear los nombres de columna españoles a ingleses para compatibilidad con el frontend  \n    return (response || []).map((community: any) => ({  \n      id: community.id,  \n      name: community.nombre,  \n      description: community.descripcion,  \n      image_url: community.icono_url,  \n      type: community.tipo,  \n      created_at: community.created_at,  \n      members_count: 0 // Esto se calculará con una query separada si es necesario  \n    }))  \n  } catch (error: any) {  \n    if (error.code === \"42P01\") return []  \n    throw error  \n  }  \n}  \n\n\n  \nexport async function joinCommunity(uid: string, community_id: string) {  \n  try {  \n    return await request(\"POST\", \"/user_communities\", {  \n      body: { user_id: uid, community_id },  \n    })  \n  } catch (error: any) {  \n    if (error.code === \"23505\") return null // Already joined  \n    throw error  \n  }  \n}  \n  \nexport async function getCommunityDetails(communityId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/communities\", {  \n      params: {  \n        id: `eq.${communityId}`,  \n        select: \"id,nombre,descripcion,icono_url,tipo,created_at,members:user_communities(count)\",  \n      },  \n    })  \n      \n    if (!response?.[0]) return null  \n      \n    const community = response[0]  \n    return {  \n      id: community.id,  \n      name: community.nombre,           // Mapear español → inglés  \n      description: community.descripcion,  \n      image_url: community.icono_url,  \n      type: community.tipo,  \n      created_at: community.created_at,  \n      members_count: community.members?.[0]?.count || 0  \n    }  \n  } catch (error: any) {  \n    console.error('Error fetching community details:', error)  \n    return null  \n  }  \n}\n  \n\n\n// Función para obtener comunidades del usuario  \nexport async function getUserCommunities(userId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/user_communities\", {  \n      params: {   \n        user_id: `eq.${userId}`,  \n        select: \"community:communities(id,nombre,icono_url,descripcion)\",  \n      },  \n    })  \n      \n    return (response || []).map((uc: any) => ({  \n      id: uc.community?.id,  \n      name: uc.community?.nombre,  \n      nombre: uc.community?.nombre,  \n      image_url: uc.community?.icono_url,  \n      icono_url: uc.community?.icono_url,  \n      descripcion: uc.community?.descripcion  \n    })).filter((c: { id: string | undefined }) => c.id)  \n  } catch (error: any) {  \n    console.error('Error fetching user communities:', error)  \n    return []  \n  }  \n}  \n  \n// Función para obtener canales de comunidad  \nexport async function getCommunityChannels(communityId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/community_channels\", {  \n      params: {  \n        community_id: `eq.${communityId}`,  \n        select: \"id,name,description,type,created_at\",  \n        order: \"created_at.asc\"  \n      },  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching community channels:', error)  \n    return []  \n  }  \n}\n\n// Función para obtener posts de una comunidad específica  \nexport async function getCommunityPosts(communityId: string, limit = 20) {  \n  try {  \n    const response = await request(\"GET\", \"/posts\", {  \n      params: {  \n        community_id: `eq.${communityId}`,  \n        select: \"id,contenido,created_at,likes_count,comment_count,user_id,users!inner(nombre,photo_url,role)\",  \n        order: \"created_at.desc\",  \n        limit: String(limit),  \n      },  \n    })  \n      \n    return (response || []).map((post: any) => ({  \n      id: post.id,  \n      content: post.contenido,  \n      created_at: post.created_at,  \n      likes: post.likes_count || 0,  \n      comments: post.comment_count || 0,  \n      shares: 0,  \n      author: {  \n        id: post.user_id,  \n        name: post.users?.nombre || 'Usuario',  \n        avatar: post.users?.photo_url || 'https://i.pravatar.cc/100',  \n        role: post.users?.role || 'Usuario'  \n      }  \n    }))  \n  } catch (error: any) {  \n    console.error('Error fetching community posts:', error)  \n    return []  \n  }  \n}  \n\n  \nexport async function getChannelMessages(chatId: string, limit = 50) {  \n  try {  \n    const response = await request(\"GET\", \"/chat_messages\", {  \n      params: {  \n        chat_id: `eq.${chatId}`,  \n        select: \"id,content,created_at,user:users!sender_id(id,nombre,avatar_url)\",  \n        order: \"created_at.asc\",  \n        limit: String(limit),  \n      },  \n    })  \n    return (response || []).map((msg: any) => ({  \n      id: msg.id,  \n      content: msg.content,  \n      created_at: msg.created_at,  \n      user: {  \n        id: msg.user?.id || '',  \n        nombre: msg.user?.nombre || 'Usuario',  \n        avatar: msg.user?.avatar_url || 'https://i.pravatar.cc/100'  \n      }  \n    }))  \n  } catch (error: any) {  \n    console.error('Error fetching messages:', error)  \n    return []  \n  }  \n}\n  \nexport async function sendMessage(chatId: string, userId: string, content: string) {  \n  try {  \n    const response = await request(\"POST\", \"/chat_messages\", {  \n      body: {  \n        chat_id: chatId,  \n        sender_id: userId,  \n        content: content  \n      }  \n    })  \n      \n    await request(\"PATCH\", \"/chats\", {  \n      params: { id: `eq.${chatId}` },  \n      body: {  \n        last_message: content,  \n        last_message_at: new Date().toISOString()  \n      }  \n    })  \n      \n    return response  \n  } catch (error: any) {  \n    console.error('Error sending message:', error)  \n    throw error  \n  }  \n}  \n\n\n// ===== FEED / POSTS =====  \nexport async function getUserFeed(uid: string, limit = 20) {  \n  try {  \n    // Intentar usar get_personalized_feed primero  \n    const rpcResponse = await request(\"POST\", \"/rpc/get_personalized_feed\", {  \n      body: { p_user_id: uid, p_limit: limit },  \n    })  \n    return rpcResponse || []  \n  } catch (rpcError: any) {  \n    console.log(\"RPC failed, trying direct query:\", rpcError)  \n    // Fallback: consulta directa con nombres de columna correctos  \n    try {  \n      const directResponse = await request(\"GET\", \"/posts\", {  \n        params: {  \n          select: \"id,contenido,created_at,likes_count,comment_count,user_id,users!inner(nombre,full_name,username,photo_url,avatar_url,role)\",  \n          order: \"created_at.desc\",  \n          limit: String(limit),  \n        },  \n      })  \n        \n      // Transformar los datos al formato esperado por el frontend  \n      return (directResponse || []).map((post: any) => ({  \n        id: post.id,  \n        user_data: {  \n          name: post.users?.full_name || post.users?.nombre || 'Usuario',  \n          avatar: post.users?.avatar_url || post.users?.photo_url || 'https://i.pravatar.cc/100?img=1',  \n          role: post.users?.role || 'Usuario'  \n        },  \n        content: post.contenido,  \n        image: null,  \n        post_time: new Date(post.created_at).toLocaleTimeString(),  \n        likes: post.likes_count || 0,  \n        comments: post.comment_count || 0,  \n        shares: 0,  \n        created_at: post.created_at,  \n        user_id: post.user_id  \n      }))  \n    } catch (directError: any) {  \n      console.error(\"Direct query also failed:\", directError)  \n      return []  \n    }  \n  }  \n}  \n  \nexport async function createPost(data: {  \n  user_id: string  \n  community_id?: string  \n  contenido: string  \n  media_url?: string[]  \n}) {  \n  return await request(\"POST\", \"/posts\", { body: data })  \n}  \n  \nexport async function getPostDetail(postId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/posts\", {  \n      params: {  \n        id: `eq.${postId}`,  \n        select: \"id,contenido,created_at,likes_count,comment_count,user_id,users!inner(nombre,full_name,username,photo_url,avatar_url,role),comments(*)\",  \n      },  \n    })  \n    return response?.[0] || null  \n  } catch (error) {  \n    return null  \n  }  \n}  \n  \nexport async function likePost(post_id: string, user_id: string, is_like = true) {  \n  try {  \n    return await request(\"POST\", \"/post_likes\", {  \n      body: { post_id, user_id, is_like },  \n    })  \n  } catch (error: any) {  \n    if (error.code === \"23505\") return null // Already liked  \n    return null  \n  }  \n}  \n  \nexport async function commentPost(post_id: string, user_id: string, contenido: string, parent_id?: string) {  \n  return await request(\"POST\", \"/comments\", {  \n    body: { post_id, user_id, contenido, parent_id: parent_id || null },  \n  })  \n}  \n  \n// ===== PROMOCIONES =====  \nexport async function fetchPromotions(params: { page: number; limit: number }) {  \n  try {  \n    const { page = 1, limit = 10 } = params  \n    const response = await request(\"GET\", \"/promotions\", {  \n      params: {  \n        select: \"*\",  \n        order: \"created_at.desc\",  \n        offset: String((page - 1) * limit),  \n        limit: String(limit),  \n      },  \n    })  \n    return {  \n      data: response || [],  \n      meta: {  \n        currentPage: page,  \n        totalItems: response?.length || 0,  \n        hasMore: (response?.length || 0) >= limit,  \n      },  \n    }  \n  } catch (error: any) {  \n    console.error('Error fetching promotions:', error)  \n    throw new Error(error.message || 'Error al cargar las promociones')  \n  }  \n}  \n  \n// ===== CURSOS =====  \nexport async function fetchCourses(userId: string, params: { page: number; limit: number }) {  \n  try {  \n    const { page = 1, limit = 10 } = params  \n    const response = await request(\"POST\", \"/rpc/get_user_courses\", {  \n      body: {  \n        p_user_id: userId,  \n        p_page: page,  \n        p_limit: limit,  \n      },  \n    })  \n    return {  \n      data: response || [],  \n      meta: {  \n        currentPage: page,  \n        totalItems: response?.length || 0,  \n        hasMore: (response?.length || 0) >= limit,  \n      },  \n    }  \n  } catch (error: any) {  \n    console.error('Error fetching courses:', error)  \n    throw new Error(error.message || 'Error al cargar los cursos')  \n  }  \n}  \n  \n// ===== ARTÍCULOS =====  \nexport async function fetchArticles(params: {  \n  page: number;  \n  limit: number;  \n  category?: string  \n}) {  \n  try {  \n    const { page = 1, limit = 10, category } = params  \n    const query: Record<string, string> = {  \n      select: \"*\",  \n      order: \"created_at.desc\",  \n      offset: String((page - 1) * limit),  \n      limit: String(limit),  \n    }  \n    if (category) {  \n      query.category = `eq.${category}`  \n    }  \n    const response = await request(\"GET\", \"/articles\", { params: query })  \n    return {  \n      data: response || [],  \n      meta: {  \n        currentPage: page,  \n        totalItems: response?.length || 0,  \n        hasMore: (response?.length || 0) >= limit,  \n      },  \n    }  \n  } catch (error: any) {  \n    console.error('Error fetching articles:', error)  \n    throw new Error(error.message || 'Error al cargar los artículos')  \n  }  \n}  \n  \n// ===== CONTENIDO EDUCATIVO =====  \nexport async function fetchEducationalContent(params: {  \n  page: number;  \n  limit: number;  \n  contentType?: 'video' | 'article' | 'course'  \n}) {  \n  try {  \n    const { page = 1, limit = 10, contentType } = params  \n    const query: Record<string, string> = {  \n      select: \"*\",  \n      order: \"created_at.desc\",  \n      offset: String((page - 1) * limit),  \n      limit: String(limit),  \n    }  \n    if (contentType) {  \n      query.content_type = `eq.${contentType}`  \n    }  \n    const response = await request(\"GET\", \"/educational_content\", {  \n      params: query  \n    })  \n    return {  \n      data: response || [],  \n      meta: {  \n        currentPage: page,  \n        totalItems: response?.length || 0,  \n        hasMore: (response?.length || 0) >= limit,  \n      },  \n    }  \n  } catch (error: any) {  \n    console.error('Error fetching educational content:', error)  \n    throw new Error(error.message || 'Error al cargar el contenido educativo')  \n  }  \n}  \n  \n// ===== NOTICIAS =====  \nexport async function getNewsList(category?: string) {  \n  try {  \n    const query: Record<string, string> = {  \n      select: \"*,author:users(id,nombre,full_name,username,photo_url,avatar_url)\",  \n      order: \"published_at.desc\"  \n    }  \n    if (category) {  \n      query.category = `eq.${category}`  \n    }  \n    const response = await request(\"GET\", \"/news\", { params: query })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching news:', error)  \n    return []  \n  }  \n}  \n  \nexport async function getNewsDetail(newsId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/news\", {  \n      params: {  \n        id: `eq.${newsId}`,  \n        select: \"*,author:users(id,nombre,full_name,username,photo_url,avatar_url)\"  \n      },  \n    })  \n    return response?.[0] || null  \n  } catch (error: any) {  \n    console.error('Error fetching news detail:', error)  \n    return null  \n  }  \n}  \n  \n// ===== BÚSQUEDA =====  \nexport async function globalSearch(query: string, userId: string) {  \n  try {  \n    const response = await request(\"POST\", \"/rpc/search_all\", {  \n      body: { search_term: query, current_user_id: userId }  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error in global search:', error)  \n    return []  \n  }  \n}  \n  \nexport async function searchUsers(query: string) {  \n  try {  \n    const response = await request(\"GET\", \"/users\", {  \n      params: {  \n        or: `nombre.ilike.%${query}%,username.ilike.%${query}%`,  \n        select: \"id,nombre,full_name,username,photo_url,avatar_url,role,bio\",  \n        limit: \"20\"  \n      },  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error searching users:', error)  \n    return []  \n  }  \n}  \n  \n// ===== STORAGE =====  \nexport async function uploadAvatar(uid: string, blob: Blob) {  \n  const token = await SecureStore.getItemAsync(\"access_token\")  \n  const response = await fetch(`${urls.STORAGE_URL}/object/avatars/${uid}/avatar.jpg`, {  \n    method: \"POST\",  \n    headers: {  \n      \"Content-Type\": \"image/jpeg\",  \n      \"apikey\": ANON_KEY,  \n      \"Authorization\": `Bearer ${token}`,  \n    },  \n    body: blob,  \n  })  \n  \n  if (!response.ok) {  \n    const errorText = await response.text()  \n    console.error(\"Upload error details:\", errorText)  \n    throw new Error(`Upload failed: ${response.status} ${response.statusText}`)  \n  }  \n  return await response.json()  \n}  \n  \nexport async function uploadImage(file: any) {  \n  try {  \n    const formData = new FormData()  \n    formData.append('file', file)  \n    const token = await SecureStore.getItemAsync(\"access_token\")  \n    const response = await fetch(`${urls.STORAGE_URL}/object/avatars/${file.name}`, {  \n      method: 'POST',  \n      headers: {  \n        'Authorization': `Bearer ${token}`,  \n        'apikey': ANON_KEY,  \n      },  \n      body: formData,  \n    })  \n    if (!response.ok) {  \n      throw new Error('Error al subir la imagen')  \n    }  \n    const data = await response.json()  \n    return data.url  \n  } catch (error: any) {  \n    console.error('Error uploading image:', error)  \n    return 'https://www.investiiapp.com/investi-logo-new-main.png'  \n  }  \n}  \n  \n// ===== CURSOS Y LECCIONES =====  \n\n// Funciones para educación - mantén las existentes y agrega estas  \nexport async function getCourses() {  \n  try {  \n    return await request(\"GET\", \"/courses\", {  \n      params: {  \n        select: \"id,titulo,descripcion,imagen_url,categoria,precio,total_lecciones,duracion_total\"  \n      }  \n    })  \n  } catch (error: any) {  \n    console.error('Error fetching courses:', error)  \n    return []  \n  }  \n}  \n  \nexport async function getLessons(courseId?: string) {  \n  try {  \n    let params: any = {  \n      select: \"id,titulo,descripcion,duracion,tipo,orden\"  \n    }  \n      \n    if (courseId) {  \n      params.course_id = `eq.${courseId}`  \n    }  \n      \n    return await request(\"GET\", \"/lessons\", { params })  \n  } catch (error: any) {  \n    console.error('Error fetching lessons:', error)  \n    return []  \n  }  \n}  \n  \nexport async function getCoursesWithLessons() {  \n  try {  \n    return await request(\"GET\", \"/courses\", {  \n      params: {  \n        select: \"id,titulo,descripcion,course_modules(id,titulo,orden,lessons(id,titulo,orden))\",  \n      },  \n    })  \n  } catch (error: any) {  \n    if (error.code === \"42P01\") return []  \n    return []  \n  }  \n}  \n  \n\nexport async function getUserLearningProgress(userId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/user_course_progress\", {  \n      params: {  \n        user_id: `eq.${userId}`,  \n        select: \"course:courses(id,titulo),completed_lessons,progress_percent,last_accessed\",  \n        order: \"last_accessed.desc\",  \n        limit: \"5\"  \n      }  \n    })  \n      \n    return (response || []).map((progress: any) => ({  \n      courseId: progress.course?.id,  \n      title: progress.course?.titulo,  \n      completedLessons: progress.completed_lessons,  \n      progress: progress.progress_percent,  \n      lastAccessed: progress.last_accessed  \n    }))  \n  } catch (error: any) {  \n    console.error('Error fetching learning progress:', error)  \n    return []  \n  }  \n}\n\n\n\n\nexport async function completeLesson(user_id: string, lesson_id: string) {  \n  return await request(\"POST\", \"/lesson_progress\", {  \n    body: { user_id, lesson_id },  \n  })  \n}\n\n\n  \n// ===== PORTFOLIO =====  \nexport async function getPortfolio(uid: string) {  \n  try {  \n    const response = await request(\"GET\", \"/simulated_portfolios\", {  \n      params: {  \n        user_id: `eq.${uid}`,  \n        select: \"*,simulated_investments(*)\",  \n      },  \n    })  \n    return response?.[0] || null  \n  } catch (error: any) {  \n    if (error.code === \"42P01\") return null  \n    return null  \n  }  \n}  \n  \nexport async function addInvestment(payload: any) {  \n  return await request(\"POST\", \"/simulated_investments\", { body: payload })  \n}  \n  \n// ===== BLOQUEO DE USUARIOS =====  \nexport async function blockUser(user_id: string, blocked_user_id: string) {  \n  return await request(\"POST\", \"/user_blocks\", {  \n    body: { user_id, blocked_user_id },  \n  })  \n}  \n  \n// ===== HELPERS =====  \nexport async function getCurrentUser() {  \n  try {  \n    const token = await SecureStore.getItemAsync(\"access_token\")  \n    if (!token) return null  \n    const payload = JSON.parse(atob(token.split(\".\")[1]))  \n    const uid = payload.sub || null  \n    if (!uid) return null  \n    return await getMe(uid)  \n  } catch {  \n    return null  \n  }  \n}  \n  \nexport async function getCurrentUserId(): Promise<string | null> {  \n  try {  \n    const token = await SecureStore.getItemAsync(\"access_token\")  \n    if (!token) return null  \n    const payload = JSON.parse(atob(token.split(\".\")[1]))  \n    return payload.sub || null  \n  } catch {  \n    return null  \n  }  \n}  \n  \n// ===== NOTIFICACIONES =====  \nexport async function getNotifications(userId: string) {  \n  const response = await request(\"GET\", \"/notifications\", {  \n    params: {  \n      user_id: `eq.${userId}`,  \n      select: \"*\",  \n      order: \"created_at.desc\"  \n    }  \n  })  \n  return response || []  \n}  \n  \nexport async function markNotificationAsRead(notificationId: string) {  \n  return await request(\"PATCH\", \"/notifications\", {  \n    params: { id: `eq.${notificationId}` },  \n    body: { read: true },  \n    headers: { Prefer: \"return=representation\" },  \n  })  \n}  \n  \n// ===== FAQ Y GLOSARIO =====  \nexport async function getFAQs() {  \n  const response = await request(\"GET\", \"/faqs\", {  \n    params: {  \n      select: \"*\",  \n      order: \"created_at.asc\"  \n    }  \n  })  \n  return response || []  \n}  \n  \nexport async function getGlossaryTerms() {  \n  const response = await request(\"GET\", \"/glossary\", {  \n    params: {  \n      select: \"*\",  \n      order: \"termino.asc\"  \n    }  \n  })  \n  return response || []  \n}  \n  \n// ===== BADGES =====  \nexport async function getUserBadges(userId: string) {  \n  const response = await request(\"GET\", \"/user_badges\", {  \n    params: {  \n      user_id: `eq.${userId}`,  \n      select: \"*,badge:badges(*)\"  \n    }  \n  })  \n  return response || []  \n}\n\n\n// Obtener datos de mercado  \nexport async function getMarketData() {  \n  try {  \n    const response = await request(\"GET\", \"/market_data\", {  \n      params: {  \n        select: \"*\",  \n        order: \"last_updated.desc\"  \n      },  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching market data:', error)  \n    return []  \n  }  \n}  \n  \n// Obtener datos destacados del mercado  \nexport async function getFeaturedStocks() {  \n  try {  \n    const response = await request(\"GET\", \"/market_data\", {  \n      params: {  \n        select: \"*\",  \n        is_featured: \"eq.true\",  \n        order: \"last_updated.desc\"  \n      },  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching featured stocks:', error)  \n    return []  \n  }  \n}\n\n\n\n// Obtener usuarios activos para historias  \nexport async function getActiveUsers(limit = 10) {  \n  try {  \n    const response = await request(\"GET\", \"/users\", {  \n      params: {  \n        select: \"id,nombre,avatar_url,is_online,last_seen_at\",  \n        order: \"last_seen_at.desc\",  \n        limit: String(limit),  \n      },  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching active users:', error)  \n    return []  \n  }  \n}\n  \n// Obtener chats del usuario  \n  \nexport async function getUserChats(userId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/chats\", {  \n      params: {  \n        or: `user_one_id.eq.${userId},user_two_id.eq.${userId}`,  \n        select: \"id,type,last_message,last_message_at,unread_count,community:communities(id,nombre,icono_url),user_one:users!user_one_id(id,nombre,avatar_url),user_two:users!user_two_id(id,nombre,avatar_url)\",  \n        order: \"last_message_at.desc\",  \n      },  \n    })  \n      \n    return (response || []).map((chat: any) => ({  \n      ...chat,  \n      user: chat.type === 'direct'   \n        ? (chat.user_one?.id === userId ? chat.user_two : chat.user_one)  \n        : null  \n    }))  \n  } catch (error: any) {  \n    console.error('Error fetching user chats:', error)  \n    return []  \n  }  \n}\n  \n// Obtener último mensaje por chat  \nexport async function getLastMessages(chatIds: string[]) {  \n  try {  \n    const response = await request(\"GET\", \"/messages\", {  \n      params: {  \n        chat_id: `in.(${chatIds.join(',')})`,  \n        select: \"id,chat_id,sender:users(id,nombre),content,created_at\",  \n        order: \"created_at.desc\",  \n        limit: \"1\"  \n      },  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching last messages:', error)  \n    return []  \n  }  \n}\n\n\nexport async function getUserComplete(userId: string) {  \n  try {  \n    const [userResponse, statsResponse, postsResponse, communitiesResponse] = await Promise.all([  \n      request(\"GET\", \"/users\", {  \n        params: {  \n          id: `eq.${userId}`,  \n          select: \"id,nombre,bio,location,avatar_url,banner_url,is_verified,created_at\"  \n        }  \n      }),  \n      request(\"GET\", \"/rpc/get_user_stats\", {  \n        body: { user_id: userId }  \n      }),  \n      request(\"GET\", \"/posts\", {  \n        params: {  \n          user_id: `eq.${userId}`,  \n          select: \"id,contenido,created_at,likes_count,comment_count\",  \n          order: \"created_at.desc\",  \n          limit: \"10\"  \n        }  \n      }),  \n      request(\"GET\", \"/user_communities\", {  \n        params: {  \n          user_id: `eq.${userId}`,  \n          select: \"community:communities(id,nombre,icono_url)\"  \n        }  \n      })  \n    ])  \n  \n    const user = userResponse?.[0]  \n    if (!user) return null  \n  \n    return {  \n      id: user.id,  \n      name: user.nombre,  \n      bio: user.bio,  \n      location: user.location,  \n      avatarUrl: user.avatar_url,  \n      bannerUrl: user.banner_url,  \n      isVerified: user.is_verified,  \n      stats: {  \n        postsCount: postsResponse?.length || 0,  \n        followersCount: statsResponse?.followers_count || 0,  \n        followingCount: statsResponse?.following_count || 0  \n      },  \n      posts: postsResponse || [],  \n      communities: communitiesResponse?.map((uc: any) => uc.community) || []  \n    }  \n  } catch (error: any) {  \n    console.error('Error fetching complete user profile:', error)  \n    return null  \n  }  \n}  \n  \nexport async function followUser(followerId: string, followingId: string) {  \n  try {  \n    return await request(\"POST\", \"/user_follows\", {  \n      body: { follower_id: followerId, following_id: followingId }  \n    })  \n  } catch (error: any) {  \n    if (error.code === \"23505\") return null // Already following  \n    throw error  \n  }  \n}  \n  \nexport async function unfollowUser(followerId: string, followingId: string) {  \n  try {  \n    return await request(\"DELETE\", \"/user_follows\", {  \n      params: {  \n        follower_id: `eq.${followerId}`,  \n        following_id: `eq.${followingId}`  \n      }  \n    })  \n  } catch (error: any) {  \n    console.error('Error unfollowing user:', error)  \n    throw error  \n  }  \n}  \n\n\n\nexport async function getUserPosts(userId: string, limit = 20) {  \n  try {  \n    const response = await request(\"GET\", \"/posts\", {  \n      params: {  \n        user_id: `eq.${userId}`,  \n        select: \"id,contenido,created_at,likes_count,comment_count,media_url,user:users(id,nombre,avatar_url)\",  \n        order: \"created_at.desc\",  \n        limit: String(limit)  \n      }  \n    })  \n    return response || []  \n  } catch (error: any) {  \n    console.error('Error fetching user posts:', error)  \n    return []  \n  }  \n}  \n  \nexport async function getSavedPosts(userId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/saved_posts\", {  \n      params: {  \n        user_id: `eq.${userId}`,  \n        select: \"post:posts(id,contenido,created_at,likes_count,comment_count,user:users(id,nombre,avatar_url))\",  \n        order: \"created_at.desc\"  \n      }  \n    })  \n    return response?.map((sp: any) => sp.post) || []  \n  } catch (error: any) {  \n    console.error('Error fetching saved posts:', error)  \n    return []  \n  }  \n}  \n  \nexport async function getRecommendedCommunities(userId: string) {  \n  try {  \n    const response = await request(\"GET\", \"/communities\", {  \n      params: {  \n        select: \"id,nombre,descripcion,icono_url,members:user_communities(count)\",  \n        limit: \"5\"  \n      }  \n    })  \n    return response.map((community: {\n      id: string;\n      nombre: string;\n      descripcion: string;\n      icono_url: string;\n      members?: Array<{ count: number }>;\n    }) => ({\n      id: community.id,\n      name: community.nombre,\n      description: community.descripcion,\n      imageUrl: community.icono_url,\n      memberCount: community.members?.[0]?.count || 0,\n      isMember: false // TODO: Check if user is member  \n    }))  \n  } catch (error: any) {  \n    console.error('Error fetching recommended communities:', error)  \n    return []  \n  }  \n}\n\n// ===== INVESTOR PROFILE =====\ninterface InvestorProfile {\n  id: string;\n  user_id: string;\n  experience_level: string;\n  investment_goals: string[];\n  risk_tolerance: string;\n  preferred_investments: string[];\n  created_at: string;\n  updated_at: string;\n  user?: any;\n}\n\nexport const fetchInvestorProfile = async (userId: string): Promise<InvestorProfile> => {\n  try {\n    const { data, error } = await request('GET', `/investor_profile?user_id=eq.${userId}`)\n    \n    if (error) throw error\n    \n    // If no profile exists, return a default one\n    if (!data || data.length === 0) {\n      const user = await getCurrentUser()\n      return {\n        id: userId,\n        user_id: userId,\n        experience_level: 'beginner',\n        investment_goals: [],\n        risk_tolerance: 'medium',\n        preferred_investments: [],\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        user: user || { id: userId, name: 'Inversionista' }\n      }\n    }\n    \n    // Get user data\n    const userData = await getUserProfile(userId)\n    \n    return {\n      ...data[0],\n      user: userData\n    }\n  } catch (error) {\n    console.error('Error fetching investor profile:', error)\n    throw error\n  }\n}\n\nexport { request }\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}