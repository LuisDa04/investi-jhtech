{"ast":null,"code":"import { supabase } from \"./supabase\";\nexport const signUp = async (email, password, userData) => {\n  return signUpWithMetadata(email, password, userData);\n};\nexport const signUpWithMetadata = async (email, password, userData) => {\n  const {\n    data,\n    error\n  } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      data: {\n        full_name: userData?.nombre || userData?.full_name || 'Usuario',\n        username: userData?.username || `user_${Date.now()}`,\n        avatar_url: userData?.avatar_url || userData?.photo_url\n      },\n      emailRedirectTo: `${true ? window.location.origin : 'https://investi.app'}/auth/callback`\n    }\n  });\n  if (error) throw error;\n  if (data.user) {\n    const userPayload = {\n      id: data.user.id,\n      email: data.user.email,\n      nombre: userData?.nombre || userData?.full_name || 'Usuario',\n      username: userData?.username || `user_${Date.now()}`,\n      photo_url: userData?.photo_url || userData?.avatar_url,\n      full_name: userData?.full_name || userData?.nombre || 'Usuario',\n      avatar_url: userData?.avatar_url || userData?.photo_url,\n      bio: userData?.bio || '',\n      pais: userData?.pais || '',\n      role: userData?.role || 'usuario',\n      fecha_registro: new Date().toISOString()\n    };\n    const {\n      error: profileError\n    } = await supabase.from(\"users\").upsert(userPayload, {\n      onConflict: 'id'\n    });\n    if (profileError) {\n      console.error('Error creating user profile:', profileError);\n      throw profileError;\n    }\n    try {\n      await supabase.from('investor_profiles').upsert({\n        user_id: data.user.id,\n        experience_level: 'beginner',\n        investment_goals: [],\n        risk_tolerance: 'medium',\n        preferred_investments: []\n      });\n    } catch (profileError) {\n      console.error('Error creating investor profile:', profileError);\n    }\n  }\n  return data;\n};\nexport const signIn = async (email, password) => {\n  const {\n    data,\n    error\n  } = await supabase.auth.signInWithPassword({\n    email,\n    password\n  });\n  if (error) throw error;\n  return data;\n};\nexport const getUser = async uid => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"users\").select(\"*\").eq(\"id\", uid).single();\n  if (error) throw error;\n  return data;\n};\nexport const updateUser = async (uid, updates) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"users\").update(updates).eq(\"id\", uid);\n  if (error) throw error;\n  return data;\n};\nexport const getCurrentUserId = async () => {\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n  return user?.id || null;\n};\nexport const getCurrentUser = async () => {\n  const {\n    data: {\n      user\n    }\n  } = await supabase.auth.getUser();\n  if (!user) return null;\n  try {\n    return await getUser(user.id);\n  } catch (error) {\n    if (error.code === 'PGRST116') {\n      console.log('User profile not found, creating from auth metadata...');\n      const userPayload = {\n        id: user.id,\n        email: user.email,\n        nombre: user.user_metadata?.full_name || user.user_metadata?.name || 'Usuario',\n        username: user.user_metadata?.username || `user_${Date.now()}`,\n        full_name: user.user_metadata?.full_name || user.user_metadata?.name || 'Usuario',\n        avatar_url: user.user_metadata?.avatar_url || user.user_metadata?.picture,\n        photo_url: user.user_metadata?.picture || user.user_metadata?.avatar_url,\n        bio: '',\n        pais: '',\n        role: 'usuario',\n        fecha_registro: new Date().toISOString()\n      };\n      const {\n        error: createError\n      } = await supabase.from(\"users\").upsert(userPayload, {\n        onConflict: 'id'\n      });\n      if (createError) {\n        console.error('Error creating user profile:', createError);\n        throw createError;\n      }\n      return userPayload;\n    }\n    throw error;\n  }\n};\nexport const getUserComplete = async uid => {\n  try {\n    const user = await getUser(uid);\n    if (!user) return null;\n    return {\n      id: user.id,\n      name: user.full_name || user.nombre,\n      email: user.email,\n      bio: user.bio,\n      location: user.pais,\n      avatarUrl: user.avatar_url || user.photo_url,\n      registrationDate: user.fecha_registro,\n      preferences: user.preferences || {\n        language: \"es\",\n        notifications: true,\n        theme: \"system\"\n      },\n      stats: user.stats || {\n        postsCount: 0,\n        followersCount: 0,\n        followingCount: 0\n      },\n      onboarding: {\n        interests: user.intereses || [],\n        goals: user.metas || [],\n        knowledgeLevel: user.nivel_finanzas,\n        completed: !!(user.metas?.length && user.intereses?.length && user.nivel_finanzas !== 'none')\n      }\n    };\n  } catch (error) {\n    console.error('Error getting complete user:', error);\n    return null;\n  }\n};\nexport const getUserFeed = async (userId, limit = 20) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.rpc(\"get_personalized_feed\", {\n      p_user_id: userId,\n      p_limit: limit\n    });\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.log(\"RPC failed, trying direct query:\", error);\n    const {\n      data,\n      error: fallbackError\n    } = await supabase.from(\"posts\").select(`  \n        *,  \n        author:users(id, nombre, full_name, username, photo_url, avatar_url, role)  \n      `).order(\"created_at\", {\n      ascending: false\n    }).limit(limit);\n    if (fallbackError) throw fallbackError;\n    return (data || []).map(post => Object.assign({}, post, {\n      user_data: {\n        name: post.author?.full_name || post.author?.nombre || 'Usuario',\n        avatar: post.author?.avatar_url || post.author?.photo_url,\n        role: post.author?.role || 'Usuario'\n      }\n    }));\n  }\n};\nexport const getCommunityList = async limit => {\n  let query = supabase.from(\"communities\").select(\"*\");\n  if (limit) {\n    query = query.limit(limit).order(\"created_at\", {\n      ascending: false\n    });\n  }\n  const {\n    data,\n    error\n  } = await query;\n  if (error) throw error;\n  return data || [];\n};\nexport const joinCommunity = async (userId, communityId) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"user_communities\").insert([{\n    user_id: userId,\n    community_id: communityId\n  }]);\n  if (error) throw error;\n  return data;\n};\nexport const createPost = async postData => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"posts\").insert([postData]).select();\n  if (error) throw error;\n  return data?.[0];\n};\nexport const getPostDetail = async postId => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"posts\").select(`  \n      *,  \n      author:users(id, nombre, full_name, username, photo_url, avatar_url, role),  \n      comments(*)  \n    `).eq(\"id\", postId).single();\n  if (error) throw error;\n  return data;\n};\nexport const likePost = async (postId, userId, isLike = true) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"post_likes\").upsert([{\n    post_id: postId,\n    user_id: userId,\n    is_like: isLike\n  }]);\n  if (error) throw error;\n  return data;\n};\nexport const commentPost = async (postId, userId, contenido, parentId) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"comments\").insert([{\n    post_id: postId,\n    user_id: userId,\n    contenido,\n    parent_id: parentId\n  }]);\n  if (error) throw error;\n  return data;\n};\nexport const globalSearch = async (query, userId) => {\n  const {\n    data,\n    error\n  } = await supabase.rpc(\"search_all\", {\n    search_term: query,\n    current_user_id: userId\n  });\n  if (error) throw error;\n  return data || [];\n};\nexport const getNewsList = async category => {\n  let query = supabase.from(\"news\").select(`  \n      *,  \n      author:users(id, nombre, full_name, username, photo_url, avatar_url)  \n    `).order(\"published_at\", {\n    ascending: false\n  });\n  if (category) {\n    query = query.eq(\"category\", category);\n  }\n  const {\n    data,\n    error\n  } = await query;\n  if (error) throw error;\n  return data || [];\n};\nexport const getNewsDetail = async newsId => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"news\").select(`  \n      *,  \n      author:users(id, nombre, full_name, username, photo_url, avatar_url)  \n    `).eq(\"id\", newsId).single();\n  if (error) throw error;\n  return data;\n};\nexport const uploadAvatar = async (userId, file) => {\n  const fileExt = file.uri.split(\".\").pop();\n  const fileName = `${userId}/avatar.${fileExt}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from(\"avatars\").upload(fileName, file, {\n    upsert: true\n  });\n  if (error) throw error;\n  const {\n    data: {\n      publicUrl\n    }\n  } = supabase.storage.from(\"avatars\").getPublicUrl(fileName);\n  return {\n    url: publicUrl,\n    path: fileName\n  };\n};\nexport const uploadPostMedia = async (userId, file) => {\n  const fileExt = file.uri.split(\".\").pop();\n  const fileName = `${userId}/${Date.now()}.${fileExt}`;\n  const {\n    data,\n    error\n  } = await supabase.storage.from(\"post-media\").upload(fileName, file);\n  if (error) throw error;\n  const {\n    data: {\n      publicUrl\n    }\n  } = supabase.storage.from(\"post-media\").getPublicUrl(fileName);\n  return {\n    url: publicUrl,\n    path: fileName\n  };\n};\nexport const blockUser = async (userId, blockedUserId) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"user_blocks\").insert([{\n    user_id: userId,\n    blocked_user_id: blockedUserId\n  }]);\n  if (error) throw error;\n  return data;\n};\nexport const getNotifications = async userId => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"notifications\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n    ascending: false\n  });\n  if (error) throw error;\n  return data || [];\n};\nexport const markNotificationAsRead = async notificationId => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"notifications\").update({\n    read: true,\n    read_at: new Date().toISOString()\n  }).eq(\"id\", notificationId);\n  if (error) throw error;\n  return data;\n};\nexport const getFAQs = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"faqs\").select(\"*\").order(\"created_at\", {\n    ascending: true\n  });\n  if (error) throw error;\n  return data || [];\n};\nexport const getGlossaryTerms = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"glossary\").select(\"*\").order(\"termino\", {\n    ascending: true\n  });\n  if (error) throw error;\n  return data || [];\n};\nexport const getOnboardingData = async () => {\n  try {\n    const [interests, goals, knowledgeLevels] = await Promise.all([supabase.from(\"interests\").select(\"*\").order(\"name\", {\n      ascending: true\n    }), supabase.from(\"goals\").select(\"*\").order(\"name\", {\n      ascending: true\n    }), supabase.from(\"knowledge_levels\").select(\"*\").order(\"level_order\", {\n      ascending: true\n    })]);\n    return {\n      interests: interests.data || [],\n      goals: goals.data || [],\n      knowledgeLevels: knowledgeLevels.data || []\n    };\n  } catch (error) {\n    console.error('Error loading onboarding data:', error);\n    return {\n      interests: [],\n      goals: [],\n      knowledgeLevels: []\n    };\n  }\n};\nexport const completeOnboarding = async (userId, onboardingData) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"users\").update({\n    intereses: onboardingData.interests,\n    metas: onboardingData.goals,\n    nivel_finanzas: onboardingData.knowledgeLevel\n  }).eq(\"id\", userId);\n  if (error) throw error;\n  return data;\n};\nexport const getPromotions = async params => {\n  try {\n    const limit = params?.limit || 10;\n    const offset = ((params?.page || 1) - 1) * limit;\n    const {\n      data,\n      error\n    } = await supabase.from(\"promotions\").select(\"*\").eq(\"active\", true).order(\"created_at\", {\n      ascending: false\n    }).range(offset, offset + limit - 1);\n    if (error) throw error;\n    return {\n      data: data || [],\n      meta: {\n        hasMore: data?.length === limit\n      }\n    };\n  } catch (error) {\n    console.error('Error loading promotions:', error);\n    return {\n      data: [],\n      meta: {\n        hasMore: false\n      }\n    };\n  }\n};\nexport const getCoursesWithLessons = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(\"courses\").select(`  \n        *,  \n        modules:course_modules(  \n          *,  \n          lessons(*)  \n        )  \n      `).order(\"created_at\", {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error loading courses:', error);\n    return [];\n  }\n};\nexport const completeLesson = async (userId, lessonId) => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"lesson_progress\").insert([{\n    user_id: userId,\n    lesson_id: lessonId\n  }]);\n  if (error) throw error;\n  return data;\n};\nexport const getPortfolio = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from(\"simulated_portfolios\").select(`  \n        *,  \n        investments:simulated_investments(*)  \n      `).eq(\"user_id\", userId).single();\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error loading portfolio:', error);\n    return null;\n  }\n};\nexport const addInvestment = async investmentData => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"simulated_investments\").insert([investmentData]);\n  if (error) throw error;\n  return data;\n};","map":{"version":3,"names":["supabase","signUp","email","password","userData","signUpWithMetadata","data","error","auth","options","full_name","nombre","username","Date","now","avatar_url","photo_url","emailRedirectTo","window","location","origin","user","userPayload","id","bio","pais","role","fecha_registro","toISOString","profileError","from","upsert","onConflict","console","user_id","experience_level","investment_goals","risk_tolerance","preferred_investments","signIn","signInWithPassword","getUser","uid","select","eq","single","updateUser","updates","update","getCurrentUserId","getCurrentUser","code","log","user_metadata","name","picture","createError","getUserComplete","avatarUrl","registrationDate","preferences","language","notifications","theme","stats","postsCount","followersCount","followingCount","onboarding","interests","intereses","goals","metas","knowledgeLevel","nivel_finanzas","completed","length","getUserFeed","userId","limit","rpc","p_user_id","p_limit","fallbackError","order","ascending","map","post","Object","assign","user_data","author","avatar","getCommunityList","query","joinCommunity","communityId","insert","community_id","createPost","postData","getPostDetail","postId","likePost","isLike","post_id","is_like","commentPost","contenido","parentId","parent_id","globalSearch","search_term","current_user_id","getNewsList","category","getNewsDetail","newsId","uploadAvatar","file","fileExt","uri","split","pop","fileName","storage","upload","publicUrl","getPublicUrl","url","path","uploadPostMedia","blockUser","blockedUserId","blocked_user_id","getNotifications","markNotificationAsRead","notificationId","read","read_at","getFAQs","getGlossaryTerms","getOnboardingData","knowledgeLevels","Promise","all","completeOnboarding","onboardingData","getPromotions","params","offset","page","range","meta","hasMore","getCoursesWithLessons","completeLesson","lessonId","lesson_id","getPortfolio","addInvestment","investmentData"],"sources":["C:/Users/invit/Downloads/investi-app/src/api.ts"],"sourcesContent":["import { supabase } from \"./supabase\"  \n  \n// ===== AUTH FUNCTIONS =====  \nexport const signUp = async (email: string, password: string, userData?: any) => {  \n  return signUpWithMetadata(email, password, userData)\n}\n\nexport const signUpWithMetadata = async (email: string, password: string, userData?: any) => {  \n  const { data, error } = await supabase.auth.signUp({  \n    email,  \n    password,  \n    options: {\n      data: {\n        full_name: userData?.nombre || userData?.full_name || 'Usuario',\n        username: userData?.username || `user_${Date.now()}`,\n        avatar_url: userData?.avatar_url || userData?.photo_url,\n      },\n      emailRedirectTo: `${typeof window !== 'undefined' ? window.location.origin : 'https://investi.app'}/auth/callback`,\n    },\n  })  \n  \n  if (error) throw error  \n  \n  if (data.user) {  \n    const userPayload = {\n      id: data.user.id,  \n      email: data.user.email,\n      nombre: userData?.nombre || userData?.full_name || 'Usuario',\n      username: userData?.username || `user_${Date.now()}`,\n      photo_url: userData?.photo_url || userData?.avatar_url,\n      full_name: userData?.full_name || userData?.nombre || 'Usuario',\n      avatar_url: userData?.avatar_url || userData?.photo_url,\n      bio: userData?.bio || '',\n      pais: userData?.pais || '',\n      role: userData?.role || 'usuario',\n      fecha_registro: new Date().toISOString()\n    };\n\n    const { error: profileError } = await supabase\n      .from(\"users\")\n      .upsert(userPayload, { onConflict: 'id' });\n  \n    if (profileError) {\n      console.error('Error creating user profile:', profileError);\n      throw profileError;\n    }\n\n    // Create default investor profile\n    try {\n      await supabase.from('investor_profiles').upsert({\n        user_id: data.user.id,\n        experience_level: 'beginner',\n        investment_goals: [],\n        risk_tolerance: 'medium',\n        preferred_investments: []\n      });\n    } catch (profileError) {\n      console.error('Error creating investor profile:', profileError);\n      // Don't fail signup if investor profile creation fails\n    }\n  }  \n  \n  return data;  \n}  \n  \nexport const signIn = async (email: string, password: string) => {  \n  const { data, error } = await supabase.auth.signInWithPassword({  \n    email,  \n    password,  \n  })  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== USER FUNCTIONS =====  \nexport const getUser = async (uid: string) => {  \n  const { data, error } = await supabase.from(\"users\").select(\"*\").eq(\"id\", uid).single()  \n  if (error) throw error  \n  return data  \n}  \n  \nexport const updateUser = async (uid: string, updates: any) => {  \n  const { data, error } = await supabase.from(\"users\").update(updates).eq(\"id\", uid)  \n  if (error) throw error  \n  return data  \n}  \n  \nexport const getCurrentUserId = async () => {  \n  const { data: { user } } = await supabase.auth.getUser()  \n  return user?.id || null  \n}  \n  \nexport const getCurrentUser = async () => {  \n  const { data: { user } } = await supabase.auth.getUser()  \n  if (!user) return null  \n  \n  try {\n    return await getUser(user.id)  \n  } catch (error: any) {\n    // If user profile doesn't exist, create it from auth metadata\n    if (error.code === 'PGRST116') {\n      console.log('User profile not found, creating from auth metadata...')\n      const userPayload = {\n        id: user.id,\n        email: user.email,\n        nombre: user.user_metadata?.full_name || user.user_metadata?.name || 'Usuario',\n        username: user.user_metadata?.username || `user_${Date.now()}`,\n        full_name: user.user_metadata?.full_name || user.user_metadata?.name || 'Usuario',\n        avatar_url: user.user_metadata?.avatar_url || user.user_metadata?.picture,\n        photo_url: user.user_metadata?.picture || user.user_metadata?.avatar_url,\n        bio: '',\n        pais: '',\n        role: 'usuario',\n        fecha_registro: new Date().toISOString()\n      }\n      \n      const { error: createError } = await supabase\n        .from(\"users\")\n        .upsert(userPayload, { onConflict: 'id' })\n      \n      if (createError) {\n        console.error('Error creating user profile:', createError)\n        throw createError\n      }\n      \n      return userPayload\n    }\n    throw error\n  }\n}  \n  \n// Función faltante que causa el error  \nexport const getUserComplete = async (uid: string) => {  \n  try {  \n    const user = await getUser(uid)  \n    if (!user) return null  \n  \n    return {  \n      id: user.id,  \n      name: user.full_name || user.nombre,  \n      email: user.email,  \n      bio: user.bio,  \n      location: user.pais,  \n      avatarUrl: user.avatar_url || user.photo_url,  \n      registrationDate: user.fecha_registro,  \n      preferences: user.preferences || { language: \"es\", notifications: true, theme: \"system\" },  \n      stats: user.stats || { postsCount: 0, followersCount: 0, followingCount: 0 },  \n      onboarding: {  \n        interests: user.intereses || [],  \n        goals: user.metas || [],  \n        knowledgeLevel: user.nivel_finanzas,  \n        completed: !!(user.metas?.length && user.intereses?.length && user.nivel_finanzas !== 'none')  \n      }  \n    }  \n  } catch (error) {  \n    console.error('Error getting complete user:', error)  \n    return null  \n  }  \n}  \n  \n// ===== FEED FUNCTIONS =====  \nexport const getUserFeed = async (userId: string, limit = 20) => {  \n  try {  \n    // Usar get_personalized_feed que ya tienes  \n    const { data, error } = await supabase.rpc(\"get_personalized_feed\", {  \n      p_user_id: userId,  \n      p_limit: limit,  \n    })  \n    if (error) throw error  \n    return data || []  \n  } catch (error) {  \n    console.log(\"RPC failed, trying direct query:\", error)  \n    // Fallback usando nombres de columna correctos  \n    const { data, error: fallbackError } = await supabase  \n      .from(\"posts\")  \n      .select(`  \n        *,  \n        author:users(id, nombre, full_name, username, photo_url, avatar_url, role)  \n      `)  \n      .order(\"created_at\", { ascending: false })  \n      .limit(limit)  \n  \n    if (fallbackError) throw fallbackError  \n    return (data || []).map((post: any) => ({  \n      ...post,  \n      user_data: {  \n        name: post.author?.full_name || post.author?.nombre || 'Usuario',  \n        avatar: post.author?.avatar_url || post.author?.photo_url,  \n        role: post.author?.role || 'Usuario'  \n      }  \n    }))  \n  }  \n}  \n  \n// ===== COMMUNITY FUNCTIONS =====  \nexport const getCommunityList = async (limit?: number) => {  \n  let query = supabase.from(\"communities\").select(\"*\")  \n    \n  if (limit) {  \n    query = query.limit(limit).order(\"created_at\", { ascending: false })  \n  }  \n    \n  const { data, error } = await query  \n  if (error) throw error  \n  return data || []  \n}  \n  \nexport const joinCommunity = async (userId: string, communityId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"user_communities\")  \n    .insert([{ user_id: userId, community_id: communityId }])  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== POST FUNCTIONS =====  \nexport const createPost = async (postData: {  \n  user_id: string  \n  community_id?: string  \n  contenido: string  \n  media_url?: string[]  \n}) => {  \n  const { data, error } = await supabase.from(\"posts\").insert([postData]).select()  \n  if (error) throw error  \n  return data?.[0]  \n}  \n  \nexport const getPostDetail = async (postId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"posts\")  \n    .select(`  \n      *,  \n      author:users(id, nombre, full_name, username, photo_url, avatar_url, role),  \n      comments(*)  \n    `)  \n    .eq(\"id\", postId)  \n    .single()  \n  \n  if (error) throw error  \n  return data  \n}  \n  \nexport const likePost = async (postId: string, userId: string, isLike = true) => {  \n  const { data, error } = await supabase  \n    .from(\"post_likes\")  \n    .upsert([{ post_id: postId, user_id: userId, is_like: isLike }])  \n  \n  if (error) throw error  \n  return data  \n}  \n  \nexport const commentPost = async (postId: string, userId: string, contenido: string, parentId?: string) => {  \n  const { data, error } = await supabase  \n    .from(\"comments\")  \n    .insert([{ post_id: postId, user_id: userId, contenido, parent_id: parentId }])  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== SEARCH FUNCTIONS =====  \nexport const globalSearch = async (query: string, userId: string) => {  \n  const { data, error } = await supabase.rpc(\"search_all\", {  \n    search_term: query,  \n    current_user_id: userId  \n  })  \n  \n  if (error) throw error  \n  return data || []  \n}  \n  \n// ===== NEWS FUNCTIONS =====  \nexport const getNewsList = async (category?: string) => {  \n  let query = supabase  \n    .from(\"news\")  \n    .select(`  \n      *,  \n      author:users(id, nombre, full_name, username, photo_url, avatar_url)  \n    `)  \n    .order(\"published_at\", { ascending: false })  \n  \n  if (category) {  \n    query = query.eq(\"category\", category)  \n  }  \n  \n  const { data, error } = await query  \n  if (error) throw error  \n  return data || []  \n}  \n  \nexport const getNewsDetail = async (newsId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"news\")  \n    .select(`  \n      *,  \n      author:users(id, nombre, full_name, username, photo_url, avatar_url)  \n    `)  \n    .eq(\"id\", newsId)  \n    .single()  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== STORAGE FUNCTIONS =====  \nexport const uploadAvatar = async (userId: string, file: any) => {  \n  const fileExt = file.uri.split(\".\").pop()  \n  const fileName = `${userId}/avatar.${fileExt}`  \n  \n  const { data, error } = await supabase.storage  \n    .from(\"avatars\")  \n    .upload(fileName, file, { upsert: true })  \n  \n  if (error) throw error  \n  \n  const { data: { publicUrl } } = supabase.storage  \n    .from(\"avatars\")  \n    .getPublicUrl(fileName)  \n  \n  return { url: publicUrl, path: fileName }  \n}  \n  \nexport const uploadPostMedia = async (userId: string, file: any) => {  \n  const fileExt = file.uri.split(\".\").pop()  \n  const fileName = `${userId}/${Date.now()}.${fileExt}`  \n  \n  const { data, error } = await supabase.storage  \n    .from(\"post-media\")  \n    .upload(fileName, file)  \n  \n  if (error) throw error  \n  \n  const { data: { publicUrl } } = supabase.storage  \n    .from(\"post-media\")  \n    .getPublicUrl(fileName)  \n  \n  return { url: publicUrl, path: fileName }  \n}  \n  \n// ===== BLOCK USER =====  \nexport const blockUser = async (userId: string, blockedUserId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"user_blocks\")  \n    .insert([{ user_id: userId, blocked_user_id: blockedUserId }])  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== NOTIFICATIONS =====  \nexport const getNotifications = async (userId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"notifications\")  \n    .select(\"*\")  \n    .eq(\"user_id\", userId)  \n    .order(\"created_at\", { ascending: false })  \n  \n  if (error) throw error  \n  return data || []  \n}  \n  \nexport const markNotificationAsRead = async (notificationId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"notifications\")  \n    .update({ read: true, read_at: new Date().toISOString() })  \n    .eq(\"id\", notificationId)  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== FAQ FUNCTIONS =====  \nexport const getFAQs = async () => {  \n  const { data, error } = await supabase  \n    .from(\"faqs\")  \n    .select(\"*\")  \n    .order(\"created_at\", { ascending: true })  \n  \n  if (error) throw error  \n  return data || []  \n}  \n  \n// ===== GLOSSARY FUNCTIONS =====  \nexport const getGlossaryTerms = async () => {  \n  const { data, error } = await supabase  \n    .from(\"glossary\")  \n    .select(\"*\")  \n    .order(\"termino\", { ascending: true })  \n  \n  if (error) throw error  \n  return data || []  \n}  \n  \n// ===== ONBOARDING FUNCTIONS =====  \nexport const getOnboardingData = async () => {  \n  try {  \n    const [interests, goals, knowledgeLevels] = await Promise.all([  \n      supabase.from(\"interests\").select(\"*\").order(\"name\", { ascending: true }),  \n      supabase.from(\"goals\").select(\"*\").order(\"name\", { ascending: true }),  \n      supabase.from(\"knowledge_levels\").select(\"*\").order(\"level_order\", { ascending: true })  \n    ])  \n  \n    return {  \n      interests: interests.data || [],  \n      goals: goals.data || [],  \n      knowledgeLevels: knowledgeLevels.data || []  \n    }  \n  } catch (error) {  \n    console.error('Error loading onboarding data:', error)  \n    return { interests: [], goals: [], knowledgeLevels: [] }  \n  }  \n}  \n  \nexport const completeOnboarding = async (userId: string, onboardingData: {  \n  interests: string[]  \n  goals: string[]  \n  knowledgeLevel: string  \n}) => {  \n  const { data, error } = await supabase  \n    .from(\"users\")  \n    .update({  \n      intereses: onboardingData.interests,  \n      metas: onboardingData.goals,  \n      nivel_finanzas: onboardingData.knowledgeLevel  \n    })  \n    .eq(\"id\", userId)  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== PROMOTIONS FUNCTIONS =====  \nexport const getPromotions = async (params?: { page?: number; limit?: number }) => {  \n  try {  \n    const limit = params?.limit || 10  \n    const offset = ((params?.page || 1) - 1) * limit  \n      \n    const { data, error } = await supabase  \n      .from(\"promotions\")  \n      .select(\"*\")  \n      .eq(\"active\", true)  \n      .order(\"created_at\", { ascending: false })  \n      .range(offset, offset + limit - 1)  \n  \n    if (error) throw error  \n    return {  \n      data: data || [],  \n      meta: { hasMore: data?.length === limit }  \n    }  \n  } catch (error) {  \n    console.error('Error loading promotions:', error)  \n    return { data: [], meta: { hasMore: false } }  \n  }  \n}  \n  \n// ===== COURSES FUNCTIONS =====  \nexport const getCoursesWithLessons = async () => {  \n  try {  \n    const { data, error } = await supabase  \n      .from(\"courses\")  \n      .select(`  \n        *,  \n        modules:course_modules(  \n          *,  \n          lessons(*)  \n        )  \n      `)  \n      .order(\"created_at\", { ascending: false })  \n  \n    if (error) throw error  \n    return data || []  \n  } catch (error) {  \n    console.error('Error loading courses:', error)  \n    return []  \n  }  \n}  \n  \nexport const completeLesson = async (userId: string, lessonId: string) => {  \n  const { data, error } = await supabase  \n    .from(\"lesson_progress\")  \n    .insert([{ user_id: userId, lesson_id: lessonId }])  \n  \n  if (error) throw error  \n  return data  \n}  \n  \n// ===== PORTFOLIO FUNCTIONS =====  \nexport const getPortfolio = async (userId: string) => {  \n  try {  \n    const { data, error } = await supabase  \n      .from(\"simulated_portfolios\")  \n      .select(`  \n        *,  \n        investments:simulated_investments(*)  \n      `)  \n      .eq(\"user_id\", userId)  \n      .single()  \n  \n    if (error) throw error  \n    return data  \n  } catch (error) {  \n    console.error('Error loading portfolio:', error)  \n    return null  \n  }  \n}  \n  \nexport const addInvestment = async (investmentData: {  \n  portfolio_id: string  \n  tipo_activo: string  \n  monto: number  \n  rendimiento?: number  \n  fecha: string  \n}) => {  \n  const { data, error } = await supabase  \n    .from(\"simulated_investments\")  \n    .insert([investmentData])  \n  \n  if (error) throw error  \n  return data  \n}"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}