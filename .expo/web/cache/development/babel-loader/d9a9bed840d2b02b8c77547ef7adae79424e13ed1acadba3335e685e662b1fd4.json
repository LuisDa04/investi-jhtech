{"ast":null,"code":"import 'react-native-url-polyfill/auto';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\nimport Constants from 'expo-constants';\nconst supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl || process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nconst supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey || process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\nlet supabase = {\n  auth: {\n    signIn: () => Promise.resolve({\n      error: 'Supabase not properly initialized'\n    }),\n    signOut: () => Promise.resolve({\n      error: 'Supabase not properly initialized'\n    })\n  },\n  from: () => ({\n    select: () => ({\n      data: [],\n      error: 'Supabase not properly initialized'\n    }),\n    insert: () => Promise.resolve({\n      error: 'Supabase not properly initialized'\n    }),\n    update: () => Promise.resolve({\n      error: 'Supabase not properly initialized'\n    }),\n    delete: () => Promise.resolve({\n      error: 'Supabase not properly initialized'\n    })\n  })\n};\nif (supabaseUrl && supabaseAnonKey) {\n  try {\n    supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        storage: AsyncStorage,\n        autoRefreshToken: false,\n        persistSession: true,\n        detectSessionInUrl: false\n      }\n    });\n    console.log('Supabase client initialized');\n  } catch (error) {\n    console.warn('Failed to initialize Supabase:', error);\n  }\n} else {\n  console.warn('Supabase URL or Anon Key is missing. Using mock client.');\n}\nexport { supabase };","map":{"version":3,"names":["AsyncStorage","createClient","Constants","supabaseUrl","expoConfig","extra","process","env","EXPO_PUBLIC_SUPABASE_URL","supabaseAnonKey","EXPO_PUBLIC_SUPABASE_ANON_KEY","supabase","auth","signIn","Promise","resolve","error","signOut","from","select","data","insert","update","delete","storage","autoRefreshToken","persistSession","detectSessionInUrl","console","log","warn"],"sources":["C:/Users/invit/Downloads/investi-app/src/supabase.ts"],"sourcesContent":["import 'react-native-url-polyfill/auto';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\nimport Constants from 'expo-constants';\n\n// Get environment variables with fallbacks\nconst supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl || process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nconst supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey || process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\n\n// Create a mock Supabase client that won't fail on initialization\nlet supabase: any = {\n  auth: {\n    signIn: () => Promise.resolve({ error: 'Supabase not properly initialized' }),\n    signOut: () => Promise.resolve({ error: 'Supabase not properly initialized' }),\n  },\n  from: () => ({\n    select: () => ({\n      data: [],\n      error: 'Supabase not properly initialized',\n    }),\n    insert: () => Promise.resolve({ error: 'Supabase not properly initialized' }),\n    update: () => Promise.resolve({ error: 'Supabase not properly initialized' }),\n    delete: () => Promise.resolve({ error: 'Supabase not properly initialized' }),\n  }),\n};\n\n// Only initialize the real client if we have the required config\nif (supabaseUrl && supabaseAnonKey) {\n  try {\n    supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        storage: AsyncStorage,\n        autoRefreshToken: false,\n        persistSession: true,\n        detectSessionInUrl: false,\n      },\n    });\n    console.log('Supabase client initialized');\n  } catch (error) {\n    console.warn('Failed to initialize Supabase:', error);\n  }\n} else {\n  console.warn('Supabase URL or Anon Key is missing. Using mock client.');\n}\n\nexport { supabase };\n"],"mappings":"AAAA,OAAO,gCAAgC;AACvC,OAAOA,YAAY,MAAM,2CAA2C;AACpE,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,SAAS,MAAM,gBAAgB;AAGtC,MAAMC,WAAW,GAAGD,SAAS,CAACE,UAAU,EAAEC,KAAK,EAAEF,WAAW,IAAIG,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE;AAC1G,MAAMC,eAAe,GAAGP,SAAS,CAACE,UAAU,EAAEC,KAAK,EAAEI,eAAe,IAAIH,OAAO,CAACC,GAAG,CAACG,6BAA6B,IAAI,EAAE;AAGvH,IAAIC,QAAa,GAAG;EAClBC,IAAI,EAAE;IACJC,MAAM,EAAEA,CAAA,KAAMC,OAAO,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAE;IAAoC,CAAC,CAAC;IAC7EC,OAAO,EAAEA,CAAA,KAAMH,OAAO,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAE;IAAoC,CAAC;EAC/E,CAAC;EACDE,IAAI,EAAEA,CAAA,MAAO;IACXC,MAAM,EAAEA,CAAA,MAAO;MACbC,IAAI,EAAE,EAAE;MACRJ,KAAK,EAAE;IACT,CAAC,CAAC;IACFK,MAAM,EAAEA,CAAA,KAAMP,OAAO,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAE;IAAoC,CAAC,CAAC;IAC7EM,MAAM,EAAEA,CAAA,KAAMR,OAAO,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAE;IAAoC,CAAC,CAAC;IAC7EO,MAAM,EAAEA,CAAA,KAAMT,OAAO,CAACC,OAAO,CAAC;MAAEC,KAAK,EAAE;IAAoC,CAAC;EAC9E,CAAC;AACH,CAAC;AAGD,IAAIb,WAAW,IAAIM,eAAe,EAAE;EAClC,IAAI;IACFE,QAAQ,GAAGV,YAAY,CAACE,WAAW,EAAEM,eAAe,EAAE;MACpDG,IAAI,EAAE;QACJY,OAAO,EAAExB,YAAY;QACrByB,gBAAgB,EAAE,KAAK;QACvBC,cAAc,EAAE,IAAI;QACpBC,kBAAkB,EAAE;MACtB;IACF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC5C,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdY,OAAO,CAACE,IAAI,CAAC,gCAAgC,EAAEd,KAAK,CAAC;EACvD;AACF,CAAC,MAAM;EACLY,OAAO,CAACE,IAAI,CAAC,yDAAyD,CAAC;AACzE;AAEA,SAASnB,QAAQ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}