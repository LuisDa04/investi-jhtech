// ============================================================================
// CommunitySettingsScreen.tsx - Configuración de Comunidad
// ============================================================================
// 100% Backend Driven + UI Moderna
// Accesible desde: CommunityDetailScreen (menú ...)
// ============================================================================

import React, { useState, useEffect, useCallback } from 'react'
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  Switch,
  Alert,
  ActivityIndicator,
  Platform
} from 'react-native'
import { 
  ArrowLeft, 
  Bell, 
  Users, 
  Shield, 
  Trash2, 
  Settings, 
  Lock,
  Eye,
  EyeOff,
  LogOut,
  AlertCircle
} from 'lucide-react-native'
import { useRoute, useNavigation } from '@react-navigation/native'
import { 
  getCommunityDetails, 
  updateCommunitySettings, 
  leaveCommunity, 
  deleteCommunity,
  getCurrentUser,
  isUserMemberOfCommunity
} from '../rest/api'

// ============================================================================
// INTERFACES
// ============================================================================

interface CommunitySettings {
  id: string
  name: string
  description: string
  type: 'public' | 'private'
  allow_member_posts: boolean
  require_approval: boolean
  allow_invites: boolean
  notifications_enabled: boolean
}

// ============================================================================
// COMPONENTE PRINCIPAL
// ============================================================================

export function CommunitySettingsScreen() {
  const navigation = useNavigation()
  const route = useRoute()
  const { communityId } = route.params as { communityId: string }

  // Estados
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [community, setCommunity] = useState<CommunitySettings | null>(null)
  const [currentUser, setCurrentUser] = useState<any>(null)
  const [isAdmin, setIsAdmin] = useState(false)
  
  // Settings states
  const [notifications, setNotifications] = useState(true)
  const [allowMemberPosts, setAllowMemberPosts] = useState(true)
  const [requireApproval, setRequireApproval] = useState(false)
  const [allowInvites, setAllowInvites] = useState(true)
  const [isPrivate, setIsPrivate] = useState(false)

  // ============================================================================
  // CARGAR DATOS
  // ============================================================================

  useEffect(() => {
    loadCommunitySettings()
  }, [])

  const loadCommunitySettings = async () => {
    try {
      setLoading(true)
      const [communityData, user] = await Promise.all([
        getCommunityDetails(communityId),
        getCurrentUser()
      ])

      if (communityData && user) {
        setCommunity(communityData)
        setCurrentUser(user)

        // Verificar si es admin
        const membership = await isUserMemberOfCommunity(user.id, communityId)
        setIsAdmin(membership?.role === 'admin')

        // Cargar configuraciones
        setNotifications(communityData.notifications_enabled ?? true)
        setAllowMemberPosts(communityData.allow_member_posts ?? true)
        setRequireApproval(communityData.require_approval ?? false)
        setAllowInvites(communityData.allow_invites ?? true)
        setIsPrivate(communityData.type === 'private')
      }
    } catch (error) {
      console.error('Error loading community settings:', error)
      Alert.alert('Error', 'No se pudo cargar la configuración')
    } finally {
      setLoading(false)
    }
  }

  // ============================================================================
  // GUARDAR CONFIGURACIÓN
  // ============================================================================

  const handleSaveSettings = async () => {
    if (!isAdmin) {
      Alert.alert('Permiso denegado', 'Solo los administradores pueden cambiar la configuración')
      return
    }

    try {
      setSaving(true)
      await updateCommunitySettings(communityId, {
        notifications_enabled: notifications,
        allow_member_posts: allowMemberPosts,
        require_approval: requireApproval,
        allow_invites: allowInvites,
        type: isPrivate ? 'private' : 'public'
      })
      Alert.alert('Éxito', 'Configuración guardada correctamente')
    } catch (error) {
      console.error('Error saving settings:', error)
      Alert.alert('Error', 'No se pudo guardar la configuración')
    } finally {
      setSaving(false)
    }
  }

  // ============================================================================
  // ACCIONES CRÍTICAS
  // ============================================================================

  const handleLeaveCommunity = () => {
    Alert.alert(
      'Abandonar Comunidad',
      `¿Estás seguro de que quieres abandonar "${community?.name}"?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Abandonar',
          style: 'destructive',
          onPress: async () => {
            try {
              if (currentUser) {
                await leaveCommunity(currentUser.id, communityId)
                Alert.alert('Éxito', 'Has abandonado la comunidad', [
                  { text: 'OK', onPress: () => (navigation as any).navigate('Communities') }
                ])
              }
            } catch (error) {
              console.error('Error leaving community:', error)
              Alert.alert('Error', 'No se pudo abandonar la comunidad')
            }
          }
        }
      ]
    )
  }

  const handleDeleteCommunity = () => {
    if (!isAdmin) {
      Alert.alert('Permiso denegado', 'Solo los administradores pueden eliminar la comunidad')
      return
    }

    Alert.alert(
      'Eliminar Comunidad',
      `Esta acción eliminará permanentemente "${community?.name}" y todo su contenido. Esta acción NO se puede deshacer.`,
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: () => {
            // Segunda confirmación
            Alert.alert(
              '¿Estás completamente seguro?',
              'Escribe "ELIMINAR" para confirmar',
              [
                { text: 'Cancelar', style: 'cancel' },
                {
                  text: 'Confirmar',
                  style: 'destructive',
                  onPress: async () => {
                    try {
                      await deleteCommunity(communityId)
                      Alert.alert('Comunidad eliminada', 'La comunidad ha sido eliminada permanentemente', [
                        { text: 'OK', onPress: () => (navigation as any).navigate('Communities') }
                      ])
                    } catch (error) {
                      console.error('Error deleting community:', error)
                      Alert.alert('Error', 'No se pudo eliminar la comunidad')
                    }
                  }
                }
              ]
            )
          }
        }
      ]
    )
  }

  // ============================================================================
  // RENDER LOADING
  // ============================================================================

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <ArrowLeft size={24} color="#111" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Configuración</Text>
          <View style={styles.headerRight} />
        </View>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2673f3" />
          <Text style={styles.loadingText}>Cargando configuración...</Text>
        </View>
      </SafeAreaView>
    )
  }

  // ============================================================================
  // RENDER PRINCIPAL
  // ============================================================================

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <ArrowLeft size={24} color="#111" />
        </TouchableOpacity>
        <View style={styles.headerCenter}>
          <Text style={styles.headerTitle}>Configuración</Text>
          {community && (
            <Text style={styles.headerSubtitle}>{community.name}</Text>
          )}
        </View>
        <View style={styles.headerRight} />
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Sección: Notificaciones */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Bell size={20} color="#2673f3" />
            <Text style={styles.sectionTitle}>Notificaciones</Text>
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <Text style={styles.settingTitle}>Notificaciones Push</Text>
              <Text style={styles.settingDescription}>
                Recibe notificaciones de nuevas publicaciones y actividad
              </Text>
            </View>
            <Switch
              value={notifications}
              onValueChange={(value) => {
                setNotifications(value)
                if (isAdmin) handleSaveSettings()
              }}
              trackColor={{ false: '#e5e5e5', true: '#2673f3' }}
              thumbColor="#fff"
            />
          </View>
        </View>

        {/* Sección: Privacidad (Solo Admin) */}
        {isAdmin && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Lock size={20} color="#2673f3" />
              <Text style={styles.sectionTitle}>Privacidad</Text>
            </View>

            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <View style={styles.settingTitleRow}>
                  <Text style={styles.settingTitle}>Comunidad Privada</Text>
                  {isPrivate ? (
                    <EyeOff size={16} color="#666" />
                  ) : (
                    <Eye size={16} color="#666" />
                  )}
                </View>
                <Text style={styles.settingDescription}>
                  {isPrivate 
                    ? 'Solo miembros pueden ver el contenido' 
                    : 'Cualquiera puede ver el contenido'}
                </Text>
              </View>
              <Switch
                value={isPrivate}
                onValueChange={(value) => {
                  setIsPrivate(value)
                  handleSaveSettings()
                }}
                trackColor={{ false: '#e5e5e5', true: '#2673f3' }}
                thumbColor="#fff"
              />
            </View>

            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingTitle}>Permitir Invitaciones</Text>
                <Text style={styles.settingDescription}>
                  Los miembros pueden invitar a otros usuarios
                </Text>
              </View>
              <Switch
                value={allowInvites}
                onValueChange={(value) => {
                  setAllowInvites(value)
                  handleSaveSettings()
                }}
                trackColor={{ false: '#e5e5e5', true: '#2673f3' }}
                thumbColor="#fff"
              />
            </View>
          </View>
        )}

        {/* Sección: Moderación (Solo Admin) */}
        {isAdmin && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Shield size={20} color="#2673f3" />
              <Text style={styles.sectionTitle}>Moderación</Text>
            </View>

            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingTitle}>Publicaciones de Miembros</Text>
                <Text style={styles.settingDescription}>
                  Permitir que todos los miembros publiquen
                </Text>
              </View>
              <Switch
                value={allowMemberPosts}
                onValueChange={(value) => {
                  setAllowMemberPosts(value)
                  handleSaveSettings()
                }}
                trackColor={{ false: '#e5e5e5', true: '#2673f3' }}
                thumbColor="#fff"
              />
            </View>

            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingTitle}>Aprobar Publicaciones</Text>
                <Text style={styles.settingDescription}>
                  Revisar publicaciones antes de que sean visibles
                </Text>
              </View>
              <Switch
                value={requireApproval}
                onValueChange={(value) => {
                  setRequireApproval(value)
                  handleSaveSettings()
                }}
                trackColor={{ false: '#e5e5e5', true: '#2673f3' }}
                thumbColor="#fff"
              />
            </View>
          </View>
        )}

        {/* Sección: Información */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Settings size={20} color="#2673f3" />
            <Text style={styles.sectionTitle}>Información</Text>
          </View>

          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Tipo de comunidad</Text>
            <Text style={styles.infoValue}>
              {isPrivate ? 'Privada' : 'Pública'}
            </Text>
          </View>

          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Tu rol</Text>
            <Text style={styles.infoValue}>
              {isAdmin ? 'Administrador' : 'Miembro'}
            </Text>
          </View>

          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>ID de comunidad</Text>
            <Text style={styles.infoValueMono}>{communityId.slice(0, 8)}...</Text>
          </View>
        </View>

        {/* Sección: Zona de Peligro */}
        <View style={styles.dangerSection}>
          <View style={styles.sectionHeader}>
            <AlertCircle size={20} color="#FF3B30" />
            <Text style={[styles.sectionTitle, styles.dangerTitle]}>Zona de Peligro</Text>
          </View>

          <TouchableOpacity
            style={styles.dangerButton}
            onPress={handleLeaveCommunity}
          >
            <LogOut size={20} color="#FF3B30" />
            <View style={styles.dangerButtonInfo}>
              <Text style={styles.dangerButtonTitle}>Abandonar Comunidad</Text>
              <Text style={styles.dangerButtonDescription}>
                Dejarás de ser miembro y perderás acceso al contenido
              </Text>
            </View>
          </TouchableOpacity>

          {isAdmin && (
            <TouchableOpacity
              style={[styles.dangerButton, styles.criticalButton]}
              onPress={handleDeleteCommunity}
            >
              <Trash2 size={20} color="#FF3B30" />
              <View style={styles.dangerButtonInfo}>
                <Text style={styles.dangerButtonTitle}>Eliminar Comunidad</Text>
                <Text style={styles.dangerButtonDescription}>
                  Eliminar permanentemente esta comunidad y todo su contenido
                </Text>
              </View>
            </TouchableOpacity>
          )}
        </View>

        {/* Espaciado inferior */}
        <View style={styles.bottomSpacer} />
      </ScrollView>

      {/* Botón Guardar (Solo Admin) */}
      {isAdmin && (
        <View style={styles.saveButtonContainer}>
          <TouchableOpacity
            style={[styles.saveButton, saving && styles.saveButtonDisabled]}
            onPress={handleSaveSettings}
            disabled={saving}
          >
            {saving ? (
              <ActivityIndicator size="small" color="#fff" />
            ) : (
              <Text style={styles.saveButtonText}>Guardar Cambios</Text>
            )}
          </TouchableOpacity>
        </View>
      )}
    </SafeAreaView>
  )
}

// ============================================================================
// ESTILOS
// ============================================================================

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f7f8fa',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e5e5',
  },
  backButton: {
    padding: 4,
  },
  headerCenter: {
    flex: 1,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111',
  },
  headerSubtitle: {
    fontSize: 12,
    color: '#666',
    marginTop: 2,
  },
  headerRight: {
    width: 28,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: 12,
  },
  loadingText: {
    fontSize: 14,
    color: '#666',
  },
  scrollView: {
    flex: 1,
  },
  section: {
    backgroundColor: '#fff',
    marginTop: 16,
    paddingVertical: 16,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingHorizontal: 16,
    marginBottom: 12,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111',
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  settingInfo: {
    flex: 1,
    marginRight: 12,
  },
  settingTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginBottom: 4,
  },
  settingTitle: {
    fontSize: 15,
    fontWeight: '500',
    color: '#111',
    marginBottom: 4,
  },
  settingDescription: {
    fontSize: 13,
    color: '#666',
    lineHeight: 18,
  },
  infoItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  infoLabel: {
    fontSize: 15,
    color: '#666',
  },
  infoValue: {
    fontSize: 15,
    fontWeight: '500',
    color: '#111',
  },
  infoValueMono: {
    fontSize: 13,
    fontWeight: '500',
    color: '#666',
    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',
  },
  dangerSection: {
    backgroundColor: '#fff',
    marginTop: 16,
    paddingVertical: 16,
  },
  dangerTitle: {
    color: '#FF3B30',
  },
  dangerButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  criticalButton: {
    backgroundColor: '#FFF5F5',
  },
  dangerButtonInfo: {
    flex: 1,
  },
  dangerButtonTitle: {
    fontSize: 15,
    fontWeight: '500',
    color: '#FF3B30',
    marginBottom: 2,
  },
  dangerButtonDescription: {
    fontSize: 13,
    color: '#666',
  },
  bottomSpacer: {
    height: 100,
  },
  saveButtonContainer: {
    padding: 16,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e5e5e5',
  },
  saveButton: {
    backgroundColor: '#2673f3',
    paddingVertical: 14,
    borderRadius: 12,
    alignItems: 'center',
    shadowColor: '#2673f3',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  saveButtonDisabled: {
    backgroundColor: '#ccc',
    shadowOpacity: 0,
    elevation: 0,
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
})

export default CommunitySettingsScreen
